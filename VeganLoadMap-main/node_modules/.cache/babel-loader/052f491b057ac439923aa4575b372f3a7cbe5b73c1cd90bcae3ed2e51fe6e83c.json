{"ast":null,"code":"import { ref, defineComponent } from 'vue';\nimport { GoogleMap, Marker, MarkerCluster, InfoWindow } from 'vue3-google-map';\nimport axios from \"axios\";\nexport default defineComponent({\n  components: {\n    GoogleMap,\n    Marker,\n    MarkerCluster,\n    InfoWindow\n  },\n  setup() {\n    // googleMap에 Marker 세팅\n    const locations = ref([{\n      lat: 37.5593773,\n      lng: 126.832661\n    }, {\n      lat: 37.55795,\n      lng: 126.8397055\n    }]);\n    const dbInputData = ref({\n      // db에 넣기 위한 객체\n      storename: '',\n      placeid: '',\n      detailinfo: '',\n      location: '',\n      rating: '',\n      phonenumber: '',\n      lat: '',\n      lng: '',\n      image1: '',\n      image2: '',\n      image3: '',\n      image4: '',\n      image5: ''\n    });\n    const showMarkerInfo = async index => {\n      try {\n        // 사용자가 클릭한 마커의 정보\n        const location = locations.value[index];\n        const lat = location.lat;\n        const lng = location.lng;\n        console.log(`마커 클릭 - lat: ${lat}, lng: ${lng}`);\n        axios.get(\"/api/map\", {\n          params: {\n            lat: lat,\n            lng: lng\n          }\n        }).then(res => {\n          console.log(res);\n          const data = res.data;\n          console.log(\"data => \" + data);\n        }).catch(err => {\n          console.log(err);\n        });\n      } catch (error) {\n        console.error('Fetch error:', error);\n      }\n    };\n    return {\n      ref,\n      locations,\n      showMarkerInfo,\n      dbInputData\n    };\n  },\n  // setup()\n  data() {\n    return {\n      center: {\n        lat: 37.561736,\n        lng: 126.835419\n      },\n      // googleMap의 처음 시작 좌표\n      jsonData: null,\n      // nearby search로 얻은 주변 전체 JSON Data\n      detailPlaceInfo: null,\n      // place_id로 얻은 한 장소에 대한 JSON Data\n\n      // dbInputData : { // db에 넣기 위한 객체\n      //   storename : '',\n      //   placeid : '',\n      //   detailinfo : '',\n      //   location : '',\n      //   rating : '',\n      //   phonenumber : '',\n      //   lat : '',\n      //   lng : '',\n      //   image1: '',\n      //   image2: '',\n      //   image3: '',\n      //   image4: '',\n      //   image5: '',\n      // },\n\n      // db에서 받아와 지도 현위치 기능에 쓰일 lat, lng, place_id\n      dbLat: '',\n      dbLng: '',\n      dbPlaceId: '',\n      // mapEnter 실행 후 주변 음식점을 지도에 찍을 마커의 latlng 배열\n      locationArray: [],\n      mapKey: 0 // 구글맵을 다시 렌더링하기 위한 키, 값이 변하면 재렌더링 된다\n    };\n  },\n\n  // data()\n  methods: {\n    //   showMarkerInfo: async (index) => {  // place_id로 googleMap JSON Data를 Parsing\n    //   try {\n    //     fetch('https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=ChIJrQcG0R-dfDUREPJPWnn6jv0&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk', {\n    //       headers: {\n    //         'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n    //       }\n    //     })\n    //         .then(res => res.json())\n    //         .then(res => {\n    //           this.detailPlaceInfo = res.result;\n    //         })\n    //\n    //     const location = this.locations[index];\n    //     const lat = location.lat;\n    //     const lng = location.lng;\n    //     console.log(`마커 클릭 - lat: ${lat}, lng: ${lng}`);\n    //   } catch (error) {\n    //     // 오류 처리\n    //     console.error('Fetch error:', error);\n    //     // 또는 다른 조치를 취할 수 있음\n    //   }\n    //\n    // },  // showMarkerInfo\n    getCurrentUserLocation: function () {\n      // User의 현재 위치 가져오기\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(position => {\n          const location = {\n            enableHighAccuracy: true,\n            // 정확도 향상\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          resolve(location);\n        }, error => {\n          reject(error);\n        });\n      });\n    },\n    // getCurrentUserLocation\n    async setInputData() {\n      // nearbysearch로 얻은 데이터를 db에 넣기 전 dbInputData 객체에 세팅\n      let jsonData;\n      try {\n        fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.center.lat},%20${this.center.lng}&rankby=distance&name=채식&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\n          headers: {\n            'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n          }\n        }).then(res => res.json()).then(async res => {\n          jsonData = res;\n\n          // 최대 20개의 데이터를 dbInputData에 담는다\n          this.dbInputData = jsonData.results.slice(0, 20).filter(data => data.rating >= 4) //data의 rating이 4 이상이어야 입력\n          .map(data => ({\n            storename: data.name,\n            placeid: data.place_id,\n            location: data.vicinity,\n            rating: data.rating,\n            lat: data.geometry.location.lat,\n            lng: data.geometry.location.lng\n          }));\n\n          // data.place_id 값을 setInputData_placeid 메서드로 전달\n          this.dbInputData.forEach(data => {\n            this.setInputData_placeid(data.placeid);\n          });\n        });\n      } catch (error) {\n        // 오류 처리\n        console.error('Fetch error:', error);\n        this.errorMessage = 'Failed to fetch data. Please try again later.';\n        // 또는 다른 조치를 취할 수 있음\n      }\n    },\n\n    // setInputData\n    // place_id로 가져온 api로 dbInputData에 입력\n    async setInputData_placeid(temp_place_id) {\n      let jsonData;\n      try {\n        fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=${temp_place_id}&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\n          headers: {\n            'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n          }\n        }).then(res => res.json()).then(async res => {\n          jsonData = res;\n\n          // detailinfo에 weekday_text 배열 안의 문자열을 하나씩 붙여서 담을 임시 변수\n          let temp_detailinfo = '';\n\n          // 위에서 forEach로 돌면서 다 가져옴\n          // place_id가 일치하면 phonenumber를 저장\n          for (let i = 0; i < this.dbInputData.length; i++) {\n            if (this.dbInputData[i].placeid === temp_place_id) {\n              this.dbInputData[i].phonenumber = jsonData.result.formatted_phone_number;\n              // 일주일의 영업 정보를 detailinfo에 저장\n              if (jsonData.result && jsonData.result.opening_hours && jsonData.result.opening_hours.weekday_text) {\n                for (let k = 0; k < jsonData.result.opening_hours.weekday_text.length; k++) {\n                  if (jsonData.result.opening_hours.weekday_text[k]) temp_detailinfo += jsonData.result.opening_hours.weekday_text[k] + \"\\n\";\n                }\n                this.dbInputData[i].detailinfo = temp_detailinfo;\n              }\n              break; // 원하는 요소를 찾았으면 루프 종료\n            }\n          }\n\n          // image 저장\n          for (let i = 0; i < this.dbInputData.length; i++) {\n            if (this.dbInputData[i].placeid === temp_place_id) {\n              if (jsonData.result && jsonData.result.photos && jsonData.result.photos.length > 6) {\n                if (jsonData.result.photos[0].photo_reference) this.dbInputData[i].image1 = jsonData.result.photos[0].photo_reference;\n                if (jsonData.result.photos[1].photo_reference) this.dbInputData[i].image2 = jsonData.result.photos[1].photo_reference;\n                if (jsonData.result.photos[2].photo_reference) this.dbInputData[i].image3 = jsonData.result.photos[2].photo_reference;\n                if (jsonData.result.photos[3].photo_reference) this.dbInputData[i].image4 = jsonData.result.photos[3].photo_reference;\n                if (jsonData.result.photos[4].photo_reference) this.dbInputData[i].image5 = jsonData.result.photos[4].photo_reference;\n                break; // 원하는 요소를 찾았으면 루프 종료\n              }\n            }\n          }\n        });\n      } catch (error) {\n        // 오류 처리\n        console.error('Fetch error:', error);\n        this.errorMessage = 'Failed to fetch data. Please try again later.';\n        // 또는 다른 조치를 취할 수 있음\n      }\n    },\n\n    // setInputData_placeid\n    updateLocations(locations) {\n      this.locationArray = this.locationArray.concat(locations);\n    },\n    // map에서 enter Key를 눌렀을 때의 event. (주변 음식점이 db에 등록 됨)\n    mapEnter: function () {\n      // db에 넣기\n      for (var i = 0; i < this.dbInputData.length; i++) {\n        this.updateLocations([{\n          lat: this.dbInputData[i].lat,\n          lng: this.dbInputData[i].lng\n        }]);\n        axios.post(\"/api/map\", this.dbInputData[i]).then(res => {\n          console.log(res);\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n      this.locations = this.locationArray;\n      this.mapKey++;\n    } // mapEnter\n  },\n\n  // method()\n  async mounted() {\n    try {\n      // getCurrentUserLocation()으로 user의 currentLocation을 googleMap center로 설정\n      this.center = await this.getCurrentUserLocation();\n    } catch (error) {\n      console.log(\"Error User Location : \" + error);\n    }\n    this.setInputData();\n  } // mounted()\n});","map":{"version":3,"names":["ref","defineComponent","GoogleMap","Marker","MarkerCluster","InfoWindow","axios","components","setup","locations","lat","lng","dbInputData","storename","placeid","detailinfo","location","rating","phonenumber","image1","image2","image3","image4","image5","showMarkerInfo","index","value","console","log","get","params","then","res","data","catch","err","error","center","jsonData","detailPlaceInfo","dbLat","dbLng","dbPlaceId","locationArray","mapKey","methods","getCurrentUserLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","enableHighAccuracy","coords","latitude","longitude","setInputData","fetch","headers","json","results","slice","filter","map","name","place_id","vicinity","geometry","forEach","setInputData_placeid","errorMessage","temp_place_id","temp_detailinfo","i","length","result","formatted_phone_number","opening_hours","weekday_text","k","photos","photo_reference","updateLocations","concat","mapEnter","post","mounted"],"sources":["C:\\Ucamp\\VeganProject\\VeganLoadMap-main\\VeganLoadMap-main\\src\\components\\Map.vue"],"sourcesContent":["<template>\n  <GoogleMap\n      api-key=\"AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\"\n      style=\"width: 100%; height: 500px\"\n      :center=\"center\"\n      :zoom=\"17\"\n      language=\"kor\"\n      @keyup.enter=\"mapEnter\"\n  >\n    <MarkerCluster>\n      <Marker v-for=\"(location, i) in locations\" :options=\"{ position: location }\" :key=\"i\"\n              @click=\"showMarkerInfo(i)\">\n        <InfoWindow>  <!-- Marker 클릭하면 나오는 부분 -->\n          <div id=\"contet\">\n            <div id=\"siteNotice\"></div> <!--  -->\n            <h1 id=\"firstHeading\" class=\"firstHeading\" v-if=\"detailPlaceInfo\" href=\"/\">{{ this.detailPlaceInfo.name }}</h1> <!-- 가게 이름 -->\n            <div id=\"bodyContent\">\n              <p v-if=\"detailPlaceInfo\">  <!-- 도로명 주소 formatted_address -->\n                {{ this.detailPlaceInfo.formatted_address }}\n              </p>\n              <p v-if=\"detailPlaceInfo\">  <!-- 별점 rating -->\n                {{ this.detailPlaceInfo.rating }}\n              </p>\n              <p>Marker Info Place</p>\n<!--              <div>-->\n<!--                <img src=\"https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=AcJnMuEOKrWrFJWjgJ0hP9z6YEAW_sFK_EjE8YGfW4OpXVjrKGOFylnNfvubR_pNu19Gpob7ftOzYggMoq2wWtToKc0LQkhMRBll8X5HDuBpME1W9VYH8JmSYj_VeQL2vny-bKmEP-tSFfFAcpdf1AMwpdF6VrLEaXUzsRoj4qemUB_ekuhk&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\">-->\n<!--              </div>-->\n              <div v-if=\"dbInputData.detailinfo\">\n                {{ this.dbInputData.detailinfo }}\n              </div>\n            </div>\n          </div>\n        </InfoWindow>\n      </Marker>\n    </MarkerCluster>\n  </GoogleMap>\n</template>\n\n<script>\nimport { ref, defineComponent } from 'vue'\nimport { GoogleMap, Marker, MarkerCluster, InfoWindow } from 'vue3-google-map'\nimport axios from \"axios\";\n\nexport default defineComponent({\n  components: {GoogleMap, Marker, MarkerCluster, InfoWindow},\n  setup() {\n\n    // googleMap에 Marker 세팅\n    const locations = ref([\n      {lat: 37.5593773, lng: 126.832661},\n      {lat: 37.55795, lng: 126.8397055},\n    ]);\n\n    const dbInputData = ref( { // db에 넣기 위한 객체\n      storename : '',\n      placeid : '',\n      detailinfo : '',\n      location : '',\n      rating : '',\n      phonenumber : '',\n      lat : '',\n      lng : '',\n      image1: '',\n      image2: '',\n      image3: '',\n      image4: '',\n      image5: '',\n    });\n\n\n    const showMarkerInfo = async (index) => {\n      try {\n        // 사용자가 클릭한 마커의 정보\n        const location = locations.value[index];\n        const lat = location.lat;\n        const lng = location.lng;\n        console.log(`마커 클릭 - lat: ${lat}, lng: ${lng}`);\n\n        axios.get(\"/api/map\", {\n          params: {\n            lat: lat,\n            lng: lng,\n          }\n        })\n            .then(res => {\n              console.log(res)\n              const data = res.data;\n\n              console.log(\"data => \" + data);\n            }).catch(err => {\n          console.log(err);\n        })\n\n      } catch (error) {\n        console.error('Fetch error:', error);\n      }\n    };\n\n\n    return { ref, locations, showMarkerInfo, dbInputData }\n  },  // setup()\n  data() {\n    return {\n      center : {lat: 37.561736, lng: 126.835419},  // googleMap의 처음 시작 좌표\n      jsonData : null,  // nearby search로 얻은 주변 전체 JSON Data\n      detailPlaceInfo : null, // place_id로 얻은 한 장소에 대한 JSON Data\n\n      // dbInputData : { // db에 넣기 위한 객체\n      //   storename : '',\n      //   placeid : '',\n      //   detailinfo : '',\n      //   location : '',\n      //   rating : '',\n      //   phonenumber : '',\n      //   lat : '',\n      //   lng : '',\n      //   image1: '',\n      //   image2: '',\n      //   image3: '',\n      //   image4: '',\n      //   image5: '',\n      // },\n\n      // db에서 받아와 지도 현위치 기능에 쓰일 lat, lng, place_id\n      dbLat: '',\n      dbLng: '',\n      dbPlaceId: '',\n\n      // mapEnter 실행 후 주변 음식점을 지도에 찍을 마커의 latlng 배열\n      locationArray: [],\n      mapKey: 0,  // 구글맵을 다시 렌더링하기 위한 키, 값이 변하면 재렌더링 된다\n\n\n    };\n  },  // data()\n  methods: {\n    //   showMarkerInfo: async (index) => {  // place_id로 googleMap JSON Data를 Parsing\n    //   try {\n    //     fetch('https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=ChIJrQcG0R-dfDUREPJPWnn6jv0&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk', {\n    //       headers: {\n    //         'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n    //       }\n    //     })\n    //         .then(res => res.json())\n    //         .then(res => {\n    //           this.detailPlaceInfo = res.result;\n    //         })\n    //\n    //     const location = this.locations[index];\n    //     const lat = location.lat;\n    //     const lng = location.lng;\n    //     console.log(`마커 클릭 - lat: ${lat}, lng: ${lng}`);\n    //   } catch (error) {\n    //     // 오류 처리\n    //     console.error('Fetch error:', error);\n    //     // 또는 다른 조치를 취할 수 있음\n    //   }\n    //\n    // },  // showMarkerInfo\n    getCurrentUserLocation: function () {  // User의 현재 위치 가져오기\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const location = {\n                enableHighAccuracy: true, // 정확도 향상\n                lat: position.coords.latitude,\n                lng: position.coords.longitude,\n              };\n\n              resolve(location);\n            },\n            (error) => {\n              reject(error);\n            }\n        )\n      })\n    }, // getCurrentUserLocation\n    async setInputData() {  // nearbysearch로 얻은 데이터를 db에 넣기 전 dbInputData 객체에 세팅\n      let jsonData;\n      try {\n        fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.center.lat},%20${this.center.lng}&rankby=distance&name=채식&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\n          headers: {\n            'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n          }\n        })\n            .then(res => res.json())\n            .then(async res => {\n              jsonData = res;\n\n              // 최대 20개의 데이터를 dbInputData에 담는다\n              this.dbInputData = jsonData.results.slice(0, 20)\n                  .filter(data => data.rating >= 4)  //data의 rating이 4 이상이어야 입력\n                  .map(data => ({\n                    storename: data.name,\n                    placeid: data.place_id,\n\n                    location: data.vicinity,\n                    rating: data.rating,\n                    lat: data.geometry.location.lat,\n                    lng: data.geometry.location.lng,\n                  }));\n\n              // data.place_id 값을 setInputData_placeid 메서드로 전달\n              this.dbInputData.forEach(data => {\n                this.setInputData_placeid(data.placeid);\n              });\n            });\n      } catch (error) {\n        // 오류 처리\n        console.error('Fetch error:', error);\n        this.errorMessage = 'Failed to fetch data. Please try again later.';\n        // 또는 다른 조치를 취할 수 있음\n      }\n    }, // setInputData\n    // place_id로 가져온 api로 dbInputData에 입력\n    async setInputData_placeid(temp_place_id) {\n      let jsonData;\n      try {\n        fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=${temp_place_id}&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\n          headers: {\n            'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n          }\n        })\n            .then(res => res.json())\n            .then(async res => {\n              jsonData = res;\n\n              // detailinfo에 weekday_text 배열 안의 문자열을 하나씩 붙여서 담을 임시 변수\n              let temp_detailinfo = '';\n\n              // 위에서 forEach로 돌면서 다 가져옴\n              // place_id가 일치하면 phonenumber를 저장\n              for (let i=0; i<this.dbInputData.length; i++) {\n                if (this.dbInputData[i].placeid === temp_place_id) {\n                  this.dbInputData[i].phonenumber = jsonData.result.formatted_phone_number;\n                  // 일주일의 영업 정보를 detailinfo에 저장\n                  if(jsonData.result && jsonData.result.opening_hours && jsonData.result.opening_hours.weekday_text){\n                    for(let k=0; k<jsonData.result.opening_hours.weekday_text.length; k++){\n                      if(jsonData.result.opening_hours.weekday_text[k])\n                        temp_detailinfo += (jsonData.result.opening_hours.weekday_text[k] + \"\\n\");\n                    }\n                    this.dbInputData[i].detailinfo = temp_detailinfo;\n                  }\n\n                  break; // 원하는 요소를 찾았으면 루프 종료\n                }\n              }\n\n              // image 저장\n              for (let i = 0; i < this.dbInputData.length; i++) {\n                if (this.dbInputData[i].placeid === temp_place_id) {\n                  if(jsonData.result && jsonData.result.photos && jsonData.result.photos.length>6) {\n                    if (jsonData.result.photos[0].photo_reference)\n                      this.dbInputData[i].image1 = jsonData.result.photos[0].photo_reference;\n\n                    if (jsonData.result.photos[1].photo_reference)\n                      this.dbInputData[i].image2 = jsonData.result.photos[1].photo_reference;\n\n                    if (jsonData.result.photos[2].photo_reference)\n                      this.dbInputData[i].image3 = jsonData.result.photos[2].photo_reference;\n\n                    if (jsonData.result.photos[3].photo_reference)\n                      this.dbInputData[i].image4 = jsonData.result.photos[3].photo_reference;\n\n                    if (jsonData.result.photos[4].photo_reference)\n                      this.dbInputData[i].image5 = jsonData.result.photos[4].photo_reference;\n\n                    break; // 원하는 요소를 찾았으면 루프 종료\n                  }\n\n                }\n              }\n            });\n      } catch (error) {\n        // 오류 처리\n        console.error('Fetch error:', error);\n        this.errorMessage = 'Failed to fetch data. Please try again later.';\n        // 또는 다른 조치를 취할 수 있음\n      }\n    },  // setInputData_placeid\n    updateLocations(locations) {\n      this.locationArray = this.locationArray.concat(locations);\n    },\n    // map에서 enter Key를 눌렀을 때의 event. (주변 음식점이 db에 등록 됨)\n    mapEnter : function() {\n      // db에 넣기\n      for(var i=0; i<this.dbInputData.length; i++){\n        this.updateLocations([{ lat: this.dbInputData[i].lat, lng: this.dbInputData[i].lng }])\n\n\n        axios.post(\"/api/map\", this.dbInputData[i])\n            .then(res => {\n              console.log(res);\n            }).catch(err => {\n          console.log(err);\n        })\n      }\n\n      this.locations = this.locationArray;\n      this.mapKey++;\n\n    }, // mapEnter\n\n\n  },  // method()\n  async mounted() {\n\n    try {\n      // getCurrentUserLocation()으로 user의 currentLocation을 googleMap center로 설정\n      this.center = await this.getCurrentUserLocation();\n    } catch (error) {\n      console.log(\"Error User Location : \" + error);\n    }\n\n    this.setInputData();\n  },  // mounted()\n})\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}