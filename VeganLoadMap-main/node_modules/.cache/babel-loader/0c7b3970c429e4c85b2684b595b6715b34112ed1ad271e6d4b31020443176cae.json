{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createBlock as _createBlock, withKeys as _withKeys } from \"vue\";\nconst _hoisted_1 = {\n  id: \"contet\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"siteNotice\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0,\n  id: \"firstHeading\",\n  class: \"firstHeading\",\n  href: \"/\"\n};\nconst _hoisted_4 = {\n  id: \"bodyContent\"\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = {\n  key: 2\n};\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=AcJnMuEOKrWrFJWjgJ0hP9z6YEAW_sFK_EjE8YGfW4OpXVjrKGOFylnNfvubR_pNu19Gpob7ftOzYggMoq2wWtToKc0LQkhMRBll8X5HDuBpME1W9VYH8JmSYj_VeQL2vny-bKmEP-tSFfFAcpdf1AMwpdF6VrLEaXUzsRoj4qemUB_ekuhk&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\"\n})], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_InfoWindow = _resolveComponent(\"InfoWindow\");\n  const _component_Marker = _resolveComponent(\"Marker\");\n  const _component_MarkerCluster = _resolveComponent(\"MarkerCluster\");\n  const _component_GoogleMap = _resolveComponent(\"GoogleMap\");\n  return _openBlock(), _createBlock(_component_GoogleMap, {\n    \"api-key\": \"AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"500px\"\n    },\n    center: _ctx.center,\n    zoom: 17,\n    language: \"kor\",\n    onKeyup: _withKeys(_ctx.mapEnter, [\"enter\"])\n  }, {\n    default: _withCtx(() => [_createVNode(_component_MarkerCluster, null, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.locations, (location, i) => {\n        return _openBlock(), _createBlock(_component_Marker, {\n          options: {\n            position: location\n          },\n          key: i,\n          onClick: $event => _ctx.showMarkerInfo(i)\n        }, {\n          default: _withCtx(() => [_createVNode(_component_InfoWindow, {\n            visible: _ctx.infoWindowIndex === i,\n            onClick: _ctx.closeInfoWindow\n          }, {\n            default: _withCtx(() => [_createCommentVNode(\" Marker 클릭하면 나오는 부분 \"), _createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _createCommentVNode(\"  \"), this.markerData ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_3, _toDisplayString(this.markerData.storename), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 가게 이름 \"), _createElementVNode(\"div\", _hoisted_4, [this.markerData.lotation ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createCommentVNode(\" 도로명 주소 formatted_address \"), _createTextVNode(\" \" + _toDisplayString(this.markerData.lotation), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), this.markerData.phonenumber ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _toDisplayString(this.markerData.phonenumber), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), this.markerData.rating ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createCommentVNode(\" 별점 rating \"), _createTextVNode(\" \" + _toDisplayString(this.markerData.rating), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _hoisted_8])])]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"visible\", \"onClick\"])]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"options\", \"onClick\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"center\", \"onKeyup\"]);\n}","map":{"version":3,"names":["id","_createElementVNode","class","href","src","_createBlock","_component_GoogleMap","style","center","_ctx","zoom","language","onKeyup","_withKeys","mapEnter","_createVNode","_component_MarkerCluster","_createElementBlock","_Fragment","_renderList","locations","location","i","_component_Marker","options","position","key","onClick","$event","showMarkerInfo","_component_InfoWindow","visible","infoWindowIndex","closeInfoWindow","_createCommentVNode","_hoisted_1","_hoisted_2","markerData","_hoisted_3","_toDisplayString","storename","_hoisted_4","lotation","_hoisted_5","phonenumber","_hoisted_6","rating","_hoisted_7","_hoisted_8"],"sources":["C:\\Ucamp\\VeganProject\\VeganLoadMap-main\\VeganLoadMap-main\\src\\components\\Map.vue"],"sourcesContent":["<template>\n  <GoogleMap\n      api-key=\"AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\"\n      style=\"width: 100%; height: 500px\"\n      :center=\"center\"\n      :zoom=\"17\"\n      language=\"kor\"\n      @keyup.enter=\"mapEnter\"\n  >\n    <MarkerCluster>\n      <Marker v-for=\"(location, i) in locations\" :options=\"{ position: location }\" :key=\"i\"\n              @click=\"showMarkerInfo(i)\">\n        <InfoWindow :visible=\"infoWindowIndex === i\" @click=\"closeInfoWindow\" >  <!-- Marker 클릭하면 나오는 부분 -->\n          <div id=\"contet\">\n            <div id=\"siteNotice\"></div> <!--  -->\n            <h1 id=\"firstHeading\" class=\"firstHeading\" v-if=\"this.markerData\" href=\"/\">{{ this.markerData.storename }}</h1> <!-- 가게 이름 -->\n            <div id=\"bodyContent\">\n              <div v-if=\"this.markerData.lotation\">  <!-- 도로명 주소 formatted_address -->\n                {{ this.markerData.lotation }}\n              </div>\n              <div v-if=\"this.markerData.phonenumber\">\n                {{ this.markerData.phonenumber }}\n              </div>\n              <div v-if=\"this.markerData.rating\">  <!-- 별점 rating -->\n                {{ this.markerData.rating }}\n              </div>\n              <div>\n                <img src=\"https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=AcJnMuEOKrWrFJWjgJ0hP9z6YEAW_sFK_EjE8YGfW4OpXVjrKGOFylnNfvubR_pNu19Gpob7ftOzYggMoq2wWtToKc0LQkhMRBll8X5HDuBpME1W9VYH8JmSYj_VeQL2vny-bKmEP-tSFfFAcpdf1AMwpdF6VrLEaXUzsRoj4qemUB_ekuhk&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\">\n              </div>\n            </div>\n          </div>\n        </InfoWindow>\n      </Marker>\n    </MarkerCluster>\n  </GoogleMap>\n</template>\n\n<script>\nimport { ref, defineComponent } from 'vue'\nimport { GoogleMap, Marker, MarkerCluster, InfoWindow } from 'vue3-google-map'\nimport axios from \"axios\";\n\nexport default defineComponent({\n  components: {GoogleMap, Marker, MarkerCluster, InfoWindow},\n  setup() {\n\n    // googleMap에 Marker 세팅\n    const locations = ref([\n      {lat: 37.5593773, lng: 126.832661},\n      {lat: 37.55795, lng: 126.8397055},\n    ]);\n\n    const dbInputData = ref( { // shop 테이블에 넣기 위한 객체\n      storename : '',\n      placeid : '',\n      detailinfo : '',\n      location : '',\n      rating : '',\n      phonenumber : '',\n      lat : '',\n      lng : '',\n      image1: '',\n      image2: '',\n      image3: '',\n      image4: '',\n      image5: '',\n    });\n\n    const reviewInputData = ref({ // review 테이블에 넣기 위한 객체\n      writer : '',\n      content : '',\n      storename : '',\n      star : '',\n    })\n\n    const markerData = ref({\n      storename : '',\n      location : '',\n      rating : '',\n      phonenumber : '',\n      image1 : '',\n    })\n\n    const infoWindowIndex = ref(null);\n\n    const showMarkerInfo = async (index) => {\n\n      try {\n        // 사용자가 클릭한 마커의 정보\n        const location = locations.value[index];\n        const lat = location.lat;\n        const lng = location.lng;\n        console.log(`마커 클릭 - lat: ${lat}, lng: ${lng}`);\n\n        axios.get(\"/api/map\", {\n          params: {\n            lat: lat,\n            lng: lng,\n          }\n        })\n            .then(res => {\n              console.log(res)\n              const data = res.data;\n\n              markerData.value = {\n                storename : data.storename,\n                location : data.location,\n                rating : data.rating,\n              }\n              if(data.phonenumber != null){\n                markerData.value.phonenumber = data.phonenumber;\n              }\n              if(data.image1 != null){\n                markerData.value.image1 = data.image1\n              }\n              console.log(\"InfoWindowIndex.value => \" + infoWindowIndex.value)\n\n              // 클릭한 마커의 인덱스로 InfoWindow를 열기\n              infoWindowIndex.value = index;\n\n              console.log(\"InfoWindowIndex.value => \" + infoWindowIndex.value)\n\n\n            }).catch(err => {\n          console.log(err);\n        })\n\n      } catch (error) {\n        console.error('Fetch error:', error);\n      }\n    };\n\n    const closeInfoWindow = () => {\n      infoWindowIndex.value = null;\n    };\n\n\n    return { ref, locations, showMarkerInfo, dbInputData, reviewInputData, markerData, closeInfoWindow }\n  },  // setup()\n  data() {\n    return {\n      center : {lat: 37.561736, lng: 126.835419},  // googleMap의 처음 시작 좌표\n      jsonData : null,  // nearby search로 얻은 주변 전체 JSON Data\n      detailPlaceInfo : null, // place_id로 얻은 한 장소에 대한 JSON Data\n\n      // db에서 받아와 지도 현위치 기능에 쓰일 lat, lng, place_id\n      dbLat: '',\n      dbLng: '',\n      dbPlaceId: '',\n\n      // mapEnter 실행 후 주변 음식점을 지도에 찍을 마커의 latlng 배열\n      locationArray: [],\n      mapKey: 0,  // 구글맵을 다시 렌더링하기 위한 키, 값이 변하면 재렌더링 된다\n\n\n    };\n  },  // data()\n  methods: {\n    getCurrentUserLocation: function () {  // User의 현재 위치 가져오기\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const location = {\n                enableHighAccuracy: true, // 정확도 향상\n                lat: position.coords.latitude,\n                lng: position.coords.longitude,\n              };\n\n              resolve(location);\n            },\n            (error) => {\n              reject(error);\n            }\n        )\n      })\n    }, // getCurrentUserLocation\n    async setInputData() {  // nearbysearch로 얻은 데이터를 db에 넣기 전 dbInputData 객체에 세팅\n      let jsonData;\n      try {\n        fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.center.lat},%20${this.center.lng}&rankby=distance&name=채식&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\n          headers: {\n            'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n          }\n        })\n            .then(res => res.json())\n            .then(async res => {\n              jsonData = res;\n\n              // 최대 20개의 데이터를 dbInputData에 담는다\n              this.dbInputData = jsonData.results.slice(0, 20)\n                  .filter(data => data.rating >= 4)  //data의 rating이 4 이상이어야 입력\n                  .map(data => ({\n                    storename: data.name,\n                    placeid: data.place_id,\n\n                    location: data.vicinity,\n                    rating: data.rating,\n                    lat: data.geometry.location.lat,\n                    lng: data.geometry.location.lng,\n                  }));\n\n              // data.place_id 값을 setInputData_placeid 메서드로 전달\n              this.dbInputData.forEach(data => {\n                this.setInputData_placeid(data.placeid);\n              });\n            });\n      } catch (error) {\n        // 오류 처리\n        console.error('Fetch error:', error);\n        this.errorMessage = 'Failed to fetch data. Please try again later.';\n        // 또는 다른 조치를 취할 수 있음\n      }\n    }, // setInputData\n    // place_id로 가져온 api로 dbInputData에 입력\n    async setInputData_placeid(temp_place_id) {\n      let jsonData;\n      try {\n        fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=${temp_place_id}&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\n          headers: {\n            'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n          }\n        })\n            .then(res => res.json())\n            .then(async res => {\n              jsonData = res;\n\n              // detailinfo에 weekday_text 배열 안의 문자열을 하나씩 붙여서 담을 임시 변수\n              let temp_detailinfo = '';\n\n              // 위에서 forEach로 돌면서 다 가져옴\n              // place_id가 일치하면 phonenumber를 저장\n              for (let i=0; i<this.dbInputData.length; i++) {\n                if (this.dbInputData[i].placeid === temp_place_id) {\n                  this.dbInputData[i].phonenumber = jsonData.result.formatted_phone_number;\n                  // 일주일의 영업 정보를 detailinfo에 저장\n                  if(jsonData.result && jsonData.result.opening_hours && jsonData.result.opening_hours.weekday_text){\n                    for(let k=0; k<jsonData.result.opening_hours.weekday_text.length; k++){\n                      if(jsonData.result.opening_hours.weekday_text[k])\n                        temp_detailinfo += (jsonData.result.opening_hours.weekday_text[k] + \"\\n\");\n                    }\n                    this.dbInputData[i].detailinfo = temp_detailinfo;\n                  }\n\n                  break; // 원하는 요소를 찾았으면 루프 종료\n                }\n              }\n\n              // image 저장\n              for (let i = 0; i < this.dbInputData.length; i++) {\n                if (this.dbInputData[i].placeid === temp_place_id) {\n                  if(jsonData.result && jsonData.result.photos && jsonData.result.photos.length>6) {\n                    if (jsonData.result.photos[0].photo_reference)\n                      this.dbInputData[i].image1 = jsonData.result.photos[0].photo_reference;\n\n                    if (jsonData.result.photos[1].photo_reference)\n                      this.dbInputData[i].image2 = jsonData.result.photos[1].photo_reference;\n\n                    if (jsonData.result.photos[2].photo_reference)\n                      this.dbInputData[i].image3 = jsonData.result.photos[2].photo_reference;\n\n                    if (jsonData.result.photos[3].photo_reference)\n                      this.dbInputData[i].image4 = jsonData.result.photos[3].photo_reference;\n\n                    if (jsonData.result.photos[4].photo_reference)\n                      this.dbInputData[i].image5 = jsonData.result.photos[4].photo_reference;\n\n                    break; // 원하는 요소를 찾았으면 루프 종료\n                  }\n\n                }\n              }\n\n              // for (let i = 0; i < jsonData.result.reviews.length; i++) {\n              //   this.reviewInputData.value.push({\n              //     writer: jsonData.result.reviews[i].author_name,\n              //     content: jsonData.result.reviews[i].text,\n              //     storename: jsonData.result.name,\n              //     star: jsonData.result.reviews[i].rating,\n              //   });\n              // }\n\n              // review @@@@@@@@@@@@@@@@@@\n              for(let i=0; i<jsonData.result.reviews.length; i++){\n                console.log(\"jsonData.result.value => \" + jsonData.result.reviews[i].author_name);\n                console.log(\"jsonData.result.value => \" + jsonData.result.reviews[i].text)\n                console.log(\"jsonData.result.value => \" + jsonData.result.name)\n                console.log(\"jsonData.result.value => \" + jsonData.result.reviews[i].rating)\n\n                // reviewInputData.value.writer = jsonData.result.reviews[i].author_name;\n                // reviewInputData.value.content = jsonData.result.reviews[i].text;\n                // reviewInputData.value.storename = jsonData.result.name;\n                // reviewInputData.value.star = jsonData.result.reviews[i].rating;\n\n                reviewInputData[i].writer = jsonData.result.reviews[i].author_name;\n                reviewInputData[i].content = jsonData.result.reviews[i].text;\n                reviewInputData[i].storename = jsonData.result.name;\n                reviewInputData[i].star = jsonData.result.reviews[i].rating\n\n\n\n                console.log(\"reviewInputData => \" + this.reviewInputData[i].author_name)\n\n              }\n\n            });\n      } catch (error) {\n        // 오류 처리\n        console.error('Fetch error:', error);\n        this.errorMessage = 'Failed to fetch data. Please try again later.';\n        // 또는 다른 조치를 취할 수 있음\n      }\n    },  // setInputData_placeid\n    updateLocations(locations) {\n      this.locationArray = this.locationArray.concat(locations);\n    },\n    // map에서 enter Key를 눌렀을 때의 event. (주변 음식점이 db에 등록 됨)\n    mapEnter : function() {\n      // db에 넣기\n      for(var i=0; i<this.dbInputData.length; i++){\n        this.updateLocations([{ lat: this.dbInputData[i].lat, lng: this.dbInputData[i].lng }])\n\n\n        axios.post(\"/api/map\", this.dbInputData[i])\n            .then(res => {\n              console.log(res);\n            }).catch(err => {\n          console.log(err);\n        })\n      }\n\n      this.locations = this.locationArray;\n      this.mapKey++;\n\n    }, // mapEnter\n\n\n  },  // method()\n  async mounted() {\n\n    try {\n      // getCurrentUserLocation()으로 user의 currentLocation을 googleMap center로 설정\n      this.center = await this.getCurrentUserLocation();\n    } catch (error) {\n      console.log(\"Error User Location : \" + error);\n    }\n\n    this.setInputData();\n  },  // mounted()\n})\n</script>"],"mappings":";;EAaeA,EAAE,EAAC;AAAQ;gCACdC,mBAAA,CAA2B;EAAtBD,EAAE,EAAC;AAAY;;;EAChBA,EAAE,EAAC,cAAc;EAACE,KAAK,EAAC,cAAc;EAAwBC,IAAI,EAAC;;;EAClEH,EAAE,EAAC;AAAa;;;;;;;;;;gCAUnBC,mBAAA,CAEM,c,aADJA,mBAAA,CAA0T;EAArTG,GAAG,EAAC;AAAgT,G;;;;;;;uBA1BvUC,YAAA,CAiCYC,oBAAA;IAhCR,SAAO,EAAC,yCAAyC;IACjDC,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAAkC;IACjCC,MAAM,EAAEC,IAAA,CAAAD,MAAM;IACdE,IAAI,EAAE,EAAE;IACTC,QAAQ,EAAC,KAAK;IACbC,OAAK,EAAAC,SAAA,CAAQJ,IAAA,CAAAK,QAAQ;;sBAExB,MAwBgB,CAxBhBC,YAAA,CAwBgBC,wBAAA;wBAvBN,MAAkC,E,kBAA1CC,mBAAA,CAsBSC,SAAA,QAAAC,WAAA,CAtBuBV,IAAA,CAAAW,SAAS,GAAzBC,QAAQ,EAAEC,CAAC;6BAA3BjB,YAAA,CAsBSkB,iBAAA;UAtBmCC,OAAO;YAAAC,QAAA,EAAcJ;UAAQ;UAAKK,GAAG,EAAEJ,CAAC;UAC3EK,OAAK,EAAAC,MAAA,IAAEnB,IAAA,CAAAoB,cAAc,CAACP,CAAC;;4BAC9B,MAmBa,CAnBbP,YAAA,CAmBae,qBAAA;YAnBAC,OAAO,EAAEtB,IAAA,CAAAuB,eAAe,KAAKV,CAAC;YAAGK,OAAK,EAAElB,IAAA,CAAAwB;;8BAAoB,MAA2B,CAA3BC,mBAAA,wBAA2B,EAClGjC,mBAAA,CAiBM,OAjBNkC,UAiBM,GAhBJC,UAA2B,EAACF,mBAAA,MAAS,E,KACiBG,UAAU,I,cAAhEpB,mBAAA,CAA+G,MAA/GqB,UAA+G,EAAAC,gBAAA,MAA5BF,UAAU,CAACG,SAAS,oB,mCAASN,mBAAA,WAAc,EAC9HjC,mBAAA,CAaM,OAbNwC,UAaM,G,KAZYJ,UAAU,CAACK,QAAQ,I,cAAnCzB,mBAAA,CAEM,OAAA0B,UAAA,GAFiCT,mBAAA,8BAAiC,E,iBAAA,GACtE,GAAAK,gBAAA,MAAQF,UAAU,CAACK,QAAQ,iB,6CAEbL,UAAU,CAACO,WAAW,I,cAAtC3B,mBAAA,CAEM,OAAA4B,UAAA,EAAAN,gBAAA,MADIF,UAAU,CAACO,WAAW,oB,wCAEhBP,UAAU,CAACS,MAAM,I,cAAjC7B,mBAAA,CAEM,OAAA8B,UAAA,GAF+Bb,mBAAA,eAAkB,E,iBAAA,GACrD,GAAAK,gBAAA,MAAQF,UAAU,CAACS,MAAM,iB,wCAE3BE,UAEM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}