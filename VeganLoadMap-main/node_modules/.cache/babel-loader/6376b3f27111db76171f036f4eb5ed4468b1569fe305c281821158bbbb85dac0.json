{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      mUidDate: ''\n    };\n  },\n  methods: {\n    // 결제\n    requestPay: function () {\n      const {\n        IMP\n      } = window;\n      IMP.init('imp70364071');\n      // https://developers.portone.io/docs/ko/sdk/javascript-sdk/payrq >> 파라미터 정리 되어있음.\n      IMP.request_pay({\n        // param\n        pg: \"kcp.INIBillTst_inicis\",\n        // pg사 구분코드\n        pay_method: \"card\",\n        // 결제수단 구분코드\n        merchant_uid: \"vrm_wando_0616_20231031_10\",\n        // 가맹점 주문번호. 40bytes 이하. 매 거래시 다 달라야함. 거래고유코드라고 생각해도 될듯?\n        name: \"wando 결제테스트\",\n        // 결제대상 제품명 (상품명) > 상점명(storename + 예약) 으로 바꿔야할듯\n        amount: 50,\n        // 결제 금액@@@@\n        buyer_email: '',\n        // 주문자 이메일  > default로 저게 박힘\n        buyer_name: \"김도완\" // 주문자 이름@@@@ > 김 * 완 으로 박혀있음\n      }, rsp => {\n        // callback\n        if (rsp.success) {\n          console.log(\"rsp.success => \" + rsp);\n\n          // axios로 HTTP 요청\n          const paymentData = {\n            payment_id: \"wando_\" + rsp.imp_uid,\n            // 포트원 고유 결제번호. success가 false이고 사전 validation에 실패한 경우, imp_uid는 null일 수 있음\n            storename: rsp.merchant_uid,\n            userid: rsp.name,\n            price: rsp.paid_amount,\n            status: rsp.status\n          };\n          axios.post(\"/api/payment\", paymentData).then(data => {\n            // 서버 결제 API 성공시 로직\n            console.log(data);\n            if (data.payment_id != null) alert(data.payment_id + \" 결제 성공!\");\n            this.$router.push({\n              name: \"PaymentSuccess\"\n            });\n          }).catch(error => {\n            // 서버 결제 API 실패시 로직\n            console.log(error);\n            console.log(error.toString());\n            alert(\"서버 결제 API 요청 실패\");\n          });\n        } else {\n          console.log(\"rsp.failed\" + rsp);\n          console.log(\"rsp.failed\" + rsp.error_msg);\n          alert(\"결제에 실패했습니다. 에러 내용 : \" + rsp.error_msg);\n        }\n      });\n    }\n  },\n  computed: {\n    // yyMMdd_HHmmss 변환 후 merchant_uid에 붙임 ex)231031_224258\n    formattedCurrentTime() {\n      const date = this.currentTime;\n      const year = String(date.getFullYear()).slice(-2);\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n      return `${year}${month}${day}_${hours}${minutes}${seconds}`;\n    }\n  },\n  created() {\n    this.mUidDate = this.formattedCurrentTime;\n  }\n};","map":{"version":3,"names":["axios","data","mUidDate","methods","requestPay","IMP","window","init","request_pay","pg","pay_method","merchant_uid","name","amount","buyer_email","buyer_name","rsp","success","console","log","paymentData","payment_id","imp_uid","storename","userid","price","paid_amount","status","post","then","alert","$router","push","catch","error","toString","error_msg","computed","formattedCurrentTime","date","currentTime","year","String","getFullYear","slice","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","created"],"sources":["C:\\Ucamp\\VeganProject\\VeganLoadMap-main\\VeganLoadMap-main\\src\\components\\payment\\Payment.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <button @click=\"requestPay\">결제하기</button>\r\n    <!-- 결제하기 버튼 생성 -->\r\n  </div>\r\n<!--  <p>{{ mUidDate }}</p>-->\r\n</template>\r\n\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      mUidDate : '',\r\n    }\r\n  },\r\n  methods: {\r\n    // 결제\r\n    requestPay: function () {\r\n      const { IMP } = window;\r\n\r\n      IMP.init('imp70364071');\r\n      // https://developers.portone.io/docs/ko/sdk/javascript-sdk/payrq >> 파라미터 정리 되어있음.\r\n      IMP.request_pay({ // param\r\n        pg: \"kcp.INIBillTst_inicis\",  // pg사 구분코드\r\n        pay_method: \"card\", // 결제수단 구분코드\r\n        merchant_uid: \"vrm_wando_0616_20231031_10\",  // 가맹점 주문번호. 40bytes 이하. 매 거래시 다 달라야함. 거래고유코드라고 생각해도 될듯?\r\n        name: \"wando 결제테스트\",  // 결제대상 제품명 (상품명) > 상점명(storename + 예약) 으로 바꿔야할듯\r\n        amount: 50, // 결제 금액@@@@\r\n        buyer_email: '', // 주문자 이메일  > default로 저게 박힘\r\n        buyer_name: \"김도완\",  // 주문자 이름@@@@ > 김 * 완 으로 박혀있음\r\n      }, rsp => { // callback\r\n        if (rsp.success) {\r\n          console.log(\"rsp.success => \" + rsp)\r\n\r\n          // axios로 HTTP 요청\r\n          const paymentData = {\r\n            payment_id: \"wando_\" + rsp.imp_uid,  // 포트원 고유 결제번호. success가 false이고 사전 validation에 실패한 경우, imp_uid는 null일 수 있음\r\n            storename: rsp.merchant_uid,\r\n            userid: rsp.name,\r\n            price: rsp.paid_amount,\r\n            status: rsp.status,\r\n          };\r\n\r\n              axios.post(\"/api/payment\", paymentData)\r\n              .then((data) => {\r\n                // 서버 결제 API 성공시 로직\r\n                console.log(data)\r\n                if(data.payment_id != null)\r\n                alert(data.payment_id + \" 결제 성공!\");\r\n\r\n                this.$router.push({ name: \"PaymentSuccess\" })\r\n\r\n              })\r\n              .catch((error) => {\r\n                // 서버 결제 API 실패시 로직\r\n                console.log(error)\r\n                console.log(error.toString())\r\n                alert(\"서버 결제 API 요청 실패\");\r\n              });\r\n\r\n        } else {\r\n\r\n          console.log(\"rsp.failed\" + rsp)\r\n          console.log(\"rsp.failed\" + rsp.error_msg)\r\n          alert(\"결제에 실패했습니다. 에러 내용 : \" + rsp.error_msg)\r\n        }\r\n      });\r\n    }\r\n  },\r\n  computed: {\r\n    // yyMMdd_HHmmss 변환 후 merchant_uid에 붙임 ex)231031_224258\r\n    formattedCurrentTime() {\r\n      const date = this.currentTime;\r\n      const year = String(date.getFullYear()).slice(-2);\r\n      const month = String(date.getMonth() + 1).padStart(2, '0');\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      const hours = String(date.getHours()).padStart(2, '0');\r\n      const minutes = String(date.getMinutes()).padStart(2, '0');\r\n      const seconds = String(date.getSeconds()).padStart(2, '0');\r\n\r\n      return `${year}${month}${day}_${hours}${minutes}${seconds}`;\r\n    },\r\n  },\r\n  created() {\r\n    this.mUidDate = this.formattedCurrentTime\r\n  }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}