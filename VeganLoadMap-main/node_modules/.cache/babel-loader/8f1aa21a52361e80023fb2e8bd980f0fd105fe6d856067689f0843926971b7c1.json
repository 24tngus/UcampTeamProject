{"ast":null,"code":"import router from \"@/scripts/router\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      currentTime: new Date(),\n      paymentid: null,\n      paymentData: {},\n      timeArr: [],\n      createdAt: ''\n    };\n  },\n  async mounted() {\n    this.paymentid = router.currentRoute.value.params.value;\n    console.log('Received Payment Data:', this.paymentid);\n    try {\n      const response = await axios.get(`/api/paymentSuccess/${this.paymentid}`, this.paymentid);\n      this.paymentData = response.data;\n      let combined_date = '';\n      console.log(this.paymentData.paymentid);\n      console.log(this.paymentData.storename);\n      console.log(this.paymentData.userid);\n      console.log(this.paymentData.price);\n      console.log(this.paymentData.status);\n      console.log(this.paymentData.created_at);\n      for (let i = 0; i < this.paymentData.created_at.length; i++) {\n        combined_date += this.paymentData.created_at[i];\n      }\n      console.log(\"combined => \" + combined_date);\n      this.createdAt = combined_date;\n      this.timeArr = this.paymentData.created_at;\n    } catch (error) {\n      console.error('Error while fetching data:', error);\n    }\n  },\n  computed: {\n    // yyMMdd_HHmmss 변환 후 merchant_uid에 붙임 ex)231031_224258\n    formattedCurrentTime() {\n      const date = this.currentTime;\n      const year = String(date.getFullYear()).slice(-2);\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n      return `${year}${month}${day}_${hours}${minutes}${seconds}`;\n    },\n    formattedDate() {\n      const [year, month, day, hour, minute, second] = this.timeArr;\n      const date = new Date(year, month - 1, day, hour, minute, second);\n      return this.formatDate(date);\n    }\n  },\n  methods: {\n    formatDate(date) {\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const day = date.getDate().toString().padStart(2, '0');\n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      const seconds = date.getSeconds().toString().padStart(2, '0');\n      return `${year}년 ${month}월 ${day}일 ${hours}:${minutes}:${seconds}`;\n    }\n  }\n};","map":{"version":3,"names":["router","axios","data","currentTime","Date","paymentid","paymentData","timeArr","createdAt","mounted","currentRoute","value","params","console","log","response","get","combined_date","storename","userid","price","status","created_at","i","length","error","computed","formattedCurrentTime","date","year","String","getFullYear","slice","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedDate","hour","minute","second","formatDate","methods","toString"],"sources":["C:\\Ucamp\\VeganProject\\VeganLoadMap-main\\VeganLoadMap-main\\src\\components\\payment\\PaymentSuccess.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <p>현재 시간: {{ formattedCurrentTime }}</p>\r\n  </div>\r\n\r\n  <!-- data 객체 내용을 출력 -->\r\n  <ul>\r\n    <li><p>Payment ID : {{ paymentData.paymentid }}</p></li>\r\n    <li><p>StoreName : {{ paymentData.storename }}</p></li>\r\n    <li><p>User ID : {{ paymentData.userid }}</p></li>\r\n    <li><p>Price : {{ paymentData.price }}</p></li>\r\n    <li><p>Status : {{ paymentData.status }}</p></li>\r\n    <li><p>formatTime : {{ formattedDate }}</p></li>\r\n  </ul>\r\n</template>\r\n\r\n<script>\r\nimport router from \"@/scripts/router\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      currentTime: new Date(),\r\n      paymentid : null,\r\n      paymentData : {},\r\n      timeArr : [],\r\n      createdAt : '',\r\n\r\n    };\r\n  },\r\n  async mounted() {\r\n    this.paymentid = router.currentRoute.value.params.value;\r\n    console.log('Received Payment Data:', this.paymentid);\r\n\r\n    try {\r\n      const response = await axios.get(`/api/paymentSuccess/${this.paymentid}`, this.paymentid);\r\n\r\n\r\n      this.paymentData = response.data;\r\n\r\n      let combined_date = '';\r\n\r\n      console.log(this.paymentData.paymentid);\r\n      console.log(this.paymentData.storename);\r\n      console.log(this.paymentData.userid);\r\n      console.log(this.paymentData.price);\r\n      console.log(this.paymentData.status);\r\n      console.log(this.paymentData.created_at);\r\n      for(let i=0; i<this.paymentData.created_at.length; i++) {\r\n        combined_date += this.paymentData.created_at[i];\r\n      }\r\n      console.log(\"combined => \" + combined_date);\r\n      this.createdAt = combined_date;\r\n      this.timeArr = this.paymentData.created_at;\r\n\r\n    } catch (error) {\r\n      console.error('Error while fetching data:', error);\r\n    }\r\n  },\r\n  computed: {\r\n    // yyMMdd_HHmmss 변환 후 merchant_uid에 붙임 ex)231031_224258\r\n    formattedCurrentTime() {\r\n      const date = this.currentTime;\r\n      const year = String(date.getFullYear()).slice(-2);\r\n      const month = String(date.getMonth() + 1).padStart(2, '0');\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      const hours = String(date.getHours()).padStart(2, '0');\r\n      const minutes = String(date.getMinutes()).padStart(2, '0');\r\n      const seconds = String(date.getSeconds()).padStart(2, '0');\r\n\r\n      return `${year}${month}${day}_${hours}${minutes}${seconds}`;\r\n    },\r\n    formattedDate() {\r\n      const [year, month, day, hour, minute, second] = this.timeArr;\r\n      const date = new Date(year, month - 1, day, hour, minute, second);\r\n      return this.formatDate(date);\r\n    }\r\n  },\r\n  methods: {\r\n    formatDate(date) {\r\n      const year = date.getFullYear();\r\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n      const day = date.getDate().toString().padStart(2, '0');\r\n      const hours = date.getHours().toString().padStart(2, '0');\r\n      const minutes = date.getMinutes().toString().padStart(2, '0');\r\n      const seconds = date.getSeconds().toString().padStart(2, '0');\r\n\r\n      return `${year}년 ${month}월 ${day}일 ${hours}:${minutes}:${seconds}`;\r\n    }\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}