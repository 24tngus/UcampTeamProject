{"ast":null,"code":"import axios from \"axios\";\nimport Header2 from \"@/components/header/Header2.vue\";\nexport default {\n  components: {\n    Header2\n  },\n  data() {\n    return {\n      reserves: [],\n      selectedReserve: {\n        team: 0,\n        people: 0,\n        date: '',\n        time0810: 0,\n        time1012: 0,\n        time1214: 0,\n        time1416: 0,\n        time1618: 0,\n        time1820: 0,\n        time2022: 0\n      }\n    };\n  },\n  created() {\n    this.fetchReserves();\n  },\n  methods: {\n    formatDate(date) {\n      const formattedDate = new Date(date).toISOString().split('T')[0];\n      return formattedDate;\n    },\n    toggleTime(reserve, time) {\n      if (reserve[time] === 1) {\n        reserve[time] = 0;\n      } else {\n        for (let key in reserve) {\n          if (key.includes('time') && key !== time) {\n            reserve[key] = 0;\n          }\n        }\n        reserve[time] = 1;\n\n        // 업데이트된 예약 정보를 서버에 전송\n        this.updateReserve(reserve);\n      }\n    },\n    updateReserve(reserve) {\n      axios.put(`/api/reserve/set/update/${reserve.seq}`, reserve).then(response => {\n        console.log(\"Reserve updated successfully\", response.data);\n      }).catch(error => {\n        console.error(\"Error updating reserve\", error);\n      });\n    },\n    fetchReserves() {\n      axios.get(\"/api/reservecheck\").then(response => {\n        this.reserves = response.data;\n        if (this.reserves.length > 0) {\n          this.selectedReserve = this.reserves[0];\n          this.selectedReserve.date = this.formatDate(this.selectedReserve.date);\n        }\n      }).catch(error => {\n        console.error(\"Error fetching reserves\", error);\n      });\n    }\n  },\n  watch: {\n    'selectedReserve.date'(newVal, oldVal) {\n      // 데이터를 가져오는 API 호출을 수정하여 서버로부터 올바른 데이터를 가져오도록 함\n      axios.post(\"/api/reservecheck\", this.selectedReserve).then(response => {\n        this.selectedReserve.team = response.data.team;\n        this.selectedReserve.people = response.data.people;\n      }).catch(error => {\n        console.error(\"Error fetching reserve data\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","Header2","components","data","reserves","selectedReserve","team","people","date","time0810","time1012","time1214","time1416","time1618","time1820","time2022","created","fetchReserves","methods","formatDate","formattedDate","Date","toISOString","split","toggleTime","reserve","time","key","includes","updateReserve","put","seq","then","response","console","log","catch","error","get","length","watch","selectedReserve.date","newVal","oldVal","post"],"sources":["C:\\Users\\seokhyeon\\Desktop\\asd\\VeganLoadMap-main\\src\\components\\reserve\\ReserveUpdate.vue"],"sourcesContent":["zz<script>\nimport axios from \"axios\";\nimport Header2 from \"@/components/header/Header2.vue\";\n\nexport default {\n  components: { Header2 },\n  data() {\n    return {\n      reserves: [],\n      selectedReserve: {\n        team: 0,\n        people: 0,\n        date: '',\n        time0810: 0,\n        time1012: 0,\n        time1214: 0,\n        time1416: 0,\n        time1618: 0,\n        time1820: 0,\n        time2022: 0\n      }\n    };\n  },\n  created() {\n    this.fetchReserves();\n  },\n  methods: {\n    formatDate(date) {\n      const formattedDate = new Date(date).toISOString().split('T')[0];\n      return formattedDate;\n    },\n    toggleTime(reserve, time) {\n      if (reserve[time] === 1) {\n        reserve[time] = 0;\n      } else {\n        for (let key in reserve) {\n          if (key.includes('time') && key !== time) {\n            reserve[key] = 0;\n          }\n        }\n        reserve[time] = 1;\n\n        // 업데이트된 예약 정보를 서버에 전송\n        this.updateReserve(reserve);\n      }\n    },\n    updateReserve(reserve) {\n      axios\n          .put(`/api/reserve/set/update/${reserve.seq}`, reserve)\n          .then((response) => {\n            console.log(\"Reserve updated successfully\", response.data);\n          })\n          .catch((error) => {\n            console.error(\"Error updating reserve\", error);\n          });\n    },\n    fetchReserves() {\n      axios\n          .get(\"/api/reservecheck\")\n          .then((response) => {\n            this.reserves = response.data;\n            if (this.reserves.length > 0) {\n              this.selectedReserve = this.reserves[0];\n              this.selectedReserve.date = this.formatDate(this.selectedReserve.date);\n            }\n          })\n          .catch((error) => {\n            console.error(\"Error fetching reserves\", error);\n          });\n    }\n  },\n  watch: {\n    'selectedReserve.date'(newVal, oldVal) {\n      // 데이터를 가져오는 API 호출을 수정하여 서버로부터 올바른 데이터를 가져오도록 함\n      axios\n          .post(\"/api/reservecheck\", this.selectedReserve)\n          .then((response) => {\n            this.selectedReserve.team = response.data.team;\n            this.selectedReserve.people = response.data.people;\n          })\n          .catch((error) => {\n            console.error(\"Error fetching reserve data\", error);\n          });\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css?family=Nanum+Gothic:700,800&subset=korean');\n\n*,html,body{\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  color: #333;\n  font-size: 13px;\n  font-family: 'Nanum Gothic', sans-serif, '굴림', 'gulim'\n}\n\n#wrapper {\n  background: #f1f1f1;\n}\n#container{\n  position: relative;\n  max-width: 90%;\n  min-width: 60%;\n  margin: 0 0 0 10%;\n}\n\n.form-group {\n  display: flex;\n  align-items: center; /* 세로 중앙 정렬 */\n}\n\n.input-button-container {\n  display: flex;\n  width: 100%;\n  align-items: center; /* 세로 중앙 정렬 */\n}\n\n.double {\n  background-color: darkolivegreen;\n  color: white;\n  padding: 15px;\n  width: 30%;\n  margin-left: 10px;\n  margin-bottom: 5px;\n  border-radius: 6px;\n  font-weight: 700;\n  font-size: 15px;\n  border : 1px solid white;\n}\n\n.datepicker-container {\n  width: 40%;\n  padding: 30px 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.datepicker {\n  padding : 20px 5px;\n}\n\n.formatDate {\n  margin-top: 10px;\n}\n.fieldbook div{\n  display: flex;\n  gap:10px;\n}\n.field{\n  gap:10px;\n}\n.utime {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n}\n\n.time {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.time button {\n  margin: 0;\n}\n#timebtn{\n  padding : 10px;\n  border-radius: 8px;\n  border : 3px solid lightgray;\n}\n.memberform input:not(input[type=radio]){\n  border: 1px solid #dadada;\n  padding: 15px;\n  width: 100%;\n  margin-bottom: 5px;\n  border-radius: 6px;\n}\n.memberform{\n  padding : 0 30px 30px 30px;\n}\n.bookbtn{\n  background-color: darkolivegreen;\n  color: white;\n  padding: 15px;\n  width: 100%;\n  margin-bottom: 5px;\n  border-radius: 6px;\n  font-weight: 700;\n  font-size: 15px;\n  border : 1px solid white;\n}\n#cat{\n  width : 60%;\n  height : auto;\n  margin : auto;\n  text-align: left;\n}\n.cattitle{\n  padding : 20px;\n  font-weight: 700;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}