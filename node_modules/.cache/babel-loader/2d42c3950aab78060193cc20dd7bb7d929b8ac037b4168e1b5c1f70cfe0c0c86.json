{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { GoogleMap, Marker, MarkerCluster, InfoWindow } from 'vue3-google-map';\nimport axios from \"axios\";\nexport default defineComponent({\n  components: {\n    GoogleMap,\n    Marker,\n    MarkerCluster,\n    InfoWindow\n  },\n  setup() {\n    // googleMap에 Marker 세팅\n    const locations = [{\n      lat: 37.5593773,\n      lng: 126.832661\n    }, {\n      lat: 37.55795,\n      lng: 126.8397055\n    }];\n    return {\n      locations\n    };\n  },\n  // setup()\n  data() {\n    return {\n      center: {\n        lat: 37.561736,\n        lng: 126.835419\n      },\n      // googleMap의 처음 시작 좌표\n      jsonData: null,\n      // nearby search로 얻은 주변 전체 JSON Data\n      detailPlaceInfo: null,\n      // place_id로 얻은 한 장소에 대한 JSON Data\n      dbInputData: {\n        // db에 넣기 위한 객체\n        storename: '',\n        placeid: '',\n        detailinfo: '',\n        location: '',\n        rating: '',\n        phonenumber: '',\n        lat: '',\n        lng: '',\n        image1: '',\n        image2: '',\n        image3: '',\n        image4: '',\n        image5: ''\n      },\n      // db에서 받아와 지도 현위치 기능에 쓰일 lat, lng, place_id\n      dbLat: '',\n      dbLng: '',\n      dbPlaceId: ''\n    };\n  },\n  // data()\n  methods: {\n    async showPlaceIdInfo() {\n      // place_id로 googleMap JSON Data를 Parsing\n      fetch('https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=ChIJrQcG0R-dfDUREPJPWnn6jv0&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk', {\n        headers: {\n          'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n        }\n      }).then(res => res.json()).then(res => {\n        this.detailPlaceInfo = res.result;\n      });\n    },\n    // showPlaceIdInfo\n    getCurrentUserLocation: function () {\n      // User의 현재 위치 가져오기\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(position => {\n          const location = {\n            enableHighAccuracy: true,\n            // 정확도 향상\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          resolve(location);\n        }, error => {\n          reject(error);\n        });\n      });\n    },\n    // getCurrentUserLocation\n    async setInputData() {\n      // nearbysearch로 얻은 데이터를 db에 넣기 전 dbInputData 객체에 세팅\n      let jsonData;\n      fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.center.lat},%20${this.center.lng}&rankby=distance&name=채식&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\n        headers: {\n          'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n        }\n      }).then(res => res.json()).then(async res => {\n        jsonData = res;\n\n        // 최대 20개의 데이터를 dbInputData에 담는다\n        this.dbInputData = jsonData.results.slice(0, 20).filter(data => data.rating >= 4) //data의 rating이 4 이상이어야 입력\n        .map(data => ({\n          storename: data.name,\n          placeid: data.place_id,\n          location: data.vicinity,\n          rating: data.rating,\n          lat: data.geometry.location.lat,\n          lng: data.geometry.location.lng\n        }));\n\n        // data.place_id 값을 setInputData_placeid 메서드로 전달\n        this.dbInputData.forEach(data => {\n          this.setInputData_placeid(data.placeid);\n        });\n      });\n    },\n    // setInputData\n    // place_id로 가져온 api로 dbInputData에 입력\n    async setInputData_placeid(temp_place_id) {\n      let jsonData;\n      fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=${temp_place_id}&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\n        headers: {\n          'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\n        }\n      }).then(res => res.json()).then(async res => {\n        jsonData = res;\n\n        // detailinfo에 weekday_text 배열 안의 문자열을 하나씩 붙여서 담을 임시 변수\n        let temp_detailinfo = '';\n\n        // 위에서 forEach로 돌면서 다 가져옴\n        // place_id가 일치하면 phonenumber를 저장\n        for (let i = 0; i < this.dbInputData.length; i++) {\n          if (this.dbInputData[i].placeid === temp_place_id) {\n            this.dbInputData[i].phonenumber = jsonData.result.formatted_phone_number;\n            // 일주일의 영업 정보를 detailinfo에 저장\n            if (jsonData.result && jsonData.result.opening_hours && jsonData.result.opening_hours.weekday_text) {\n              for (let k = 0; k < jsonData.result.opening_hours.weekday_text.length; k++) {\n                if (jsonData.result.opening_hours.weekday_text[k]) temp_detailinfo += jsonData.result.opening_hours.weekday_text[k] + \"\\n\";\n              }\n              this.dbInputData[i].detailinfo = temp_detailinfo;\n            }\n            break; // 원하는 요소를 찾았으면 루프 종료\n          }\n        }\n\n        // image 저장\n        for (let i = 0; i < this.dbInputData.length; i++) {\n          if (this.dbInputData[i].placeid === temp_place_id) {\n            if (jsonData.result && jsonData.result.photos && jsonData.result.photos.length > 6) {\n              if (jsonData.result.photos[0].photo_reference) this.dbInputData[i].image1 = jsonData.result.photos[0].photo_reference;\n              if (jsonData.result.photos[1].photo_reference) this.dbInputData[i].image2 = jsonData.result.photos[1].photo_reference;\n              if (jsonData.result.photos[2].photo_reference) this.dbInputData[i].image3 = jsonData.result.photos[2].photo_reference;\n              if (jsonData.result.photos[3].photo_reference) this.dbInputData[i].image4 = jsonData.result.photos[3].photo_reference;\n              if (jsonData.result.photos[4].photo_reference) this.dbInputData[i].image5 = jsonData.result.photos[4].photo_reference;\n              break; // 원하는 요소를 찾았으면 루프 종료\n            }\n          }\n\n          // dbInputData에 뭐가 들어갔는지 확인하는 부분. 나중에 지우자\n          // console.log(\"★★★ after \" + this.dbInputData[i].storename)\n          // console.log(\"★★★ after \" + this.dbInputData[i].placeid)\n          // console.log(\"★★★ after \" + this.dbInputData[i].detailinfo)\n          // console.log(\"★★★ after \" + this.dbInputData[i].location)\n          // console.log(\"★★★ after \" + this.dbInputData[i].rating)\n          // console.log(\"★★★ after \" + this.dbInputData[i].phonenumber)\n          // console.log(\"★★★ after \" + this.dbInputData[i].lat)\n          // console.log(\"★★★ after \" + this.dbInputData[i].lng)\n          // console.log(\"★★★ after \" + this.dbInputData[i].image1)\n          // console.log(\"★★★ after \" + this.dbInputData[i].image2)\n          // console.log(\"★★★ after \" + this.dbInputData[i].image3)\n          // console.log(\"★★★ after \" + this.dbInputData[i].image4)\n          // console.log(\"★★★ after \" + this.dbInputData[i].image5)\n        }\n      });\n    },\n\n    // setInputData_placeid\n    // map에서 enter Key를 눌렀을 때의 event. (주변 음식점이 db에 등록 됨)\n    mapEnter: function () {\n      // db에 넣기\n      for (var i = 0; i < this.dbInputData.length; i++) {\n        axios.post(\"/api/map\", this.dbInputData[i]).then(res => {\n          console.log(res);\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    } // mapEnter\n  },\n\n  // method()\n  async mounted() {\n    try {\n      // getCurrentUserLocation()으로 user의 currentLocation을 googleMap center로 설정\n      this.center = await this.getCurrentUserLocation();\n    } catch (error) {\n      console.log(\"Error User Location : \" + error);\n    }\n    this.setInputData();\n  } // mounted()\n});","map":{"version":3,"names":["defineComponent","GoogleMap","Marker","MarkerCluster","InfoWindow","axios","components","setup","locations","lat","lng","data","center","jsonData","detailPlaceInfo","dbInputData","storename","placeid","detailinfo","location","rating","phonenumber","image1","image2","image3","image4","image5","dbLat","dbLng","dbPlaceId","methods","showPlaceIdInfo","fetch","headers","then","res","json","result","getCurrentUserLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","enableHighAccuracy","coords","latitude","longitude","error","setInputData","results","slice","filter","map","name","place_id","vicinity","geometry","forEach","setInputData_placeid","temp_place_id","temp_detailinfo","i","length","formatted_phone_number","opening_hours","weekday_text","k","photos","photo_reference","mapEnter","post","console","log","catch","err","mounted"],"sources":["C:\\TeamProject\\VeganLoadMap\\src\\components\\Map.vue"],"sourcesContent":["<template>\r\n  <GoogleMap\r\n      api-key=\"AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\"\r\n      style=\"width: 100%; height: 500px\"\r\n      :center=\"center\"\r\n      :zoom=\"17\"\r\n      language=\"kor\"\r\n      @keyup.enter=\"mapEnter\"\r\n  >\r\n    <MarkerCluster>\r\n      <Marker v-for=\"(location, i) in locations\" :options=\"{ position: location }\" :key=\"i\"\r\n              @click=\"showPlaceIdInfo()\">\r\n        <InfoWindow>  <!-- Marker 클릭하면 나오는 부분 -->\r\n          <div id=\"contet\">\r\n            <div id=\"siteNotice\"></div> <!--  -->\r\n            <h1 id=\"firstHeading\" class=\"firstHeading\" v-if=\"detailPlaceInfo\" href=\"/\">{{ this.detailPlaceInfo.name }}</h1> <!-- 가게 이름 -->\r\n            <div id=\"bodyContent\">\r\n              <p v-if=\"detailPlaceInfo\">  <!-- 도로명 주소 formatted_address -->\r\n                {{ this.detailPlaceInfo.formatted_address }}\r\n              </p>\r\n              <p v-if=\"detailPlaceInfo\">  <!-- 별점 rating -->\r\n                {{ this.detailPlaceInfo.rating }}\r\n              </p>\r\n              <div>\r\n                <img src=\"https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=AcJnMuEOKrWrFJWjgJ0hP9z6YEAW_sFK_EjE8YGfW4OpXVjrKGOFylnNfvubR_pNu19Gpob7ftOzYggMoq2wWtToKc0LQkhMRBll8X5HDuBpME1W9VYH8JmSYj_VeQL2vny-bKmEP-tSFfFAcpdf1AMwpdF6VrLEaXUzsRoj4qemUB_ekuhk&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\">\r\n              </div>\r\n              <div v-if=\"dbInputData.detailinfo\">\r\n                {{ this.dbInputData.detailinfo }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </InfoWindow>\r\n      </Marker>\r\n    </MarkerCluster>\r\n  </GoogleMap>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport { GoogleMap, Marker, MarkerCluster, InfoWindow } from 'vue3-google-map'\r\nimport axios from \"axios\";\r\n\r\nexport default defineComponent({\r\n  components: {GoogleMap, Marker, MarkerCluster, InfoWindow},\r\n  setup() {\r\n    // googleMap에 Marker 세팅\r\n    const locations = [\r\n      {lat: 37.5593773, lng: 126.832661},\r\n      {lat: 37.55795, lng: 126.8397055},\r\n    ]\r\n    return { locations }\r\n  },  // setup()\r\n  data() {\r\n    return {\r\n      center : {lat: 37.561736, lng: 126.835419},  // googleMap의 처음 시작 좌표\r\n      jsonData : null,  // nearby search로 얻은 주변 전체 JSON Data\r\n      detailPlaceInfo : null, // place_id로 얻은 한 장소에 대한 JSON Data\r\n      dbInputData : { // db에 넣기 위한 객체\r\n        storename : '',\r\n        placeid : '',\r\n        detailinfo : '',\r\n        location : '',\r\n        rating : '',\r\n        phonenumber : '',\r\n        lat : '',\r\n        lng : '',\r\n        image1: '',\r\n        image2: '',\r\n        image3: '',\r\n        image4: '',\r\n        image5: '',\r\n      },\r\n      // db에서 받아와 지도 현위치 기능에 쓰일 lat, lng, place_id\r\n      dbLat: '',\r\n      dbLng: '',\r\n      dbPlaceId: '',\r\n    };\r\n  },  // data()\r\n  methods: {\r\n    async showPlaceIdInfo () {  // place_id로 googleMap JSON Data를 Parsing\r\n      fetch('https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=ChIJrQcG0R-dfDUREPJPWnn6jv0&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk', {\r\n        headers: {\r\n          'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\r\n        }\r\n      })\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            this.detailPlaceInfo = res.result;\r\n          })\r\n\r\n    },  // showPlaceIdInfo\r\n    getCurrentUserLocation: function () {  // User의 현재 위치 가져오기\r\n      return new Promise((resolve, reject) => {\r\n        navigator.geolocation.getCurrentPosition(\r\n            (position) => {\r\n              const location = {\r\n                enableHighAccuracy: true, // 정확도 향상\r\n                lat: position.coords.latitude,\r\n                lng: position.coords.longitude,\r\n              };\r\n\r\n              resolve(location);\r\n            },\r\n            (error) => {\r\n              reject(error);\r\n            }\r\n        )\r\n      })\r\n    }, // getCurrentUserLocation\r\n    async setInputData() {  // nearbysearch로 얻은 데이터를 db에 넣기 전 dbInputData 객체에 세팅\r\n      let jsonData;\r\n      fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.center.lat},%20${this.center.lng}&rankby=distance&name=채식&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\r\n        headers: {\r\n          'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\r\n        }\r\n      })\r\n          .then(res => res.json())\r\n          .then(async res => {\r\n            jsonData = res;\r\n\r\n            // 최대 20개의 데이터를 dbInputData에 담는다\r\n            this.dbInputData = jsonData.results.slice(0, 20)\r\n                .filter(data => data.rating>=4 )  //data의 rating이 4 이상이어야 입력\r\n                .map(data => ({\r\n                  storename: data.name,\r\n                  placeid: data.place_id,\r\n\r\n                  location: data.vicinity,\r\n                  rating: data.rating,\r\n                  lat: data.geometry.location.lat,\r\n                  lng: data.geometry.location.lng,\r\n                }));\r\n\r\n            // data.place_id 값을 setInputData_placeid 메서드로 전달\r\n            this.dbInputData.forEach(data => {\r\n              this.setInputData_placeid(data.placeid);\r\n            });\r\n          });\r\n    }, // setInputData\r\n    // place_id로 가져온 api로 dbInputData에 입력\r\n    async setInputData_placeid(temp_place_id) {\r\n      let jsonData;\r\n      fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=${temp_place_id}&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\r\n        headers: {\r\n          'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\r\n        }\r\n      })\r\n          .then(res => res.json())\r\n          .then(async res => {\r\n            jsonData = res;\r\n\r\n            // detailinfo에 weekday_text 배열 안의 문자열을 하나씩 붙여서 담을 임시 변수\r\n            let temp_detailinfo = '';\r\n\r\n            // 위에서 forEach로 돌면서 다 가져옴\r\n            // place_id가 일치하면 phonenumber를 저장\r\n            for (let i=0; i<this.dbInputData.length; i++) {\r\n              if (this.dbInputData[i].placeid === temp_place_id) {\r\n                this.dbInputData[i].phonenumber = jsonData.result.formatted_phone_number;\r\n                // 일주일의 영업 정보를 detailinfo에 저장\r\n                if(jsonData.result && jsonData.result.opening_hours && jsonData.result.opening_hours.weekday_text){\r\n                  for(let k=0; k<jsonData.result.opening_hours.weekday_text.length; k++){\r\n                    if(jsonData.result.opening_hours.weekday_text[k])\r\n                      temp_detailinfo += (jsonData.result.opening_hours.weekday_text[k] + \"\\n\");\r\n                  }\r\n                  this.dbInputData[i].detailinfo = temp_detailinfo;\r\n                }\r\n\r\n                break; // 원하는 요소를 찾았으면 루프 종료\r\n              }\r\n            }\r\n\r\n            // image 저장\r\n            for (let i = 0; i < this.dbInputData.length; i++) {\r\n              if (this.dbInputData[i].placeid === temp_place_id) {\r\n                if(jsonData.result && jsonData.result.photos && jsonData.result.photos.length>6) {\r\n                  if (jsonData.result.photos[0].photo_reference)\r\n                    this.dbInputData[i].image1 = jsonData.result.photos[0].photo_reference;\r\n\r\n                  if (jsonData.result.photos[1].photo_reference)\r\n                    this.dbInputData[i].image2 = jsonData.result.photos[1].photo_reference;\r\n\r\n                  if (jsonData.result.photos[2].photo_reference)\r\n                    this.dbInputData[i].image3 = jsonData.result.photos[2].photo_reference;\r\n\r\n                  if (jsonData.result.photos[3].photo_reference)\r\n                    this.dbInputData[i].image4 = jsonData.result.photos[3].photo_reference;\r\n\r\n                  if (jsonData.result.photos[4].photo_reference)\r\n                    this.dbInputData[i].image5 = jsonData.result.photos[4].photo_reference;\r\n\r\n                  break; // 원하는 요소를 찾았으면 루프 종료\r\n                }\r\n\r\n              }\r\n\r\n              // dbInputData에 뭐가 들어갔는지 확인하는 부분. 나중에 지우자\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].storename)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].placeid)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].detailinfo)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].location)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].rating)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].phonenumber)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].lat)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].lng)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].image1)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].image2)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].image3)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].image4)\r\n              // console.log(\"★★★ after \" + this.dbInputData[i].image5)\r\n            }\r\n          });\r\n    },  // setInputData_placeid\r\n    // map에서 enter Key를 눌렀을 때의 event. (주변 음식점이 db에 등록 됨)\r\n    mapEnter : function() {\r\n      // db에 넣기\r\n      for(var i=0; i<this.dbInputData.length; i++){\r\n        axios.post(\"/api/map\", this.dbInputData[i]).then(res => {\r\n          console.log(res);\r\n        }).catch(err => {\r\n          console.log(err);\r\n        })\r\n      }\r\n    }, // mapEnter\r\n\r\n\r\n  },  // method()\r\n  async mounted() {\r\n\r\n    try {\r\n      // getCurrentUserLocation()으로 user의 currentLocation을 googleMap center로 설정\r\n      this.center = await this.getCurrentUserLocation();\r\n    } catch (error) {\r\n      console.log(\"Error User Location : \" + error);\r\n    }\r\n\r\n    this.setInputData();\r\n  },  // mounted()\r\n})\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}