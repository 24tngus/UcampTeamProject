{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createBlock as _createBlock, withKeys as _withKeys } from \"vue\";\nconst _hoisted_1 = {\n  id: \"contet\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"siteNotice\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0,\n  id: \"firstHeading\",\n  class: \"firstHeading\",\n  href: \"/\"\n};\nconst _hoisted_4 = {\n  id: \"bodyContent\"\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Marker Info Place\", -1 /* HOISTED */);\nconst _hoisted_8 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_InfoWindow = _resolveComponent(\"InfoWindow\");\n  const _component_Marker = _resolveComponent(\"Marker\");\n  const _component_MarkerCluster = _resolveComponent(\"MarkerCluster\");\n  const _component_GoogleMap = _resolveComponent(\"GoogleMap\");\n  return _openBlock(), _createBlock(_component_GoogleMap, {\n    \"api-key\": \"AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"500px\"\n    },\n    center: _ctx.center,\n    zoom: 17,\n    language: \"kor\",\n    onKeyup: _withKeys(_ctx.mapEnter, [\"enter\"])\n  }, {\n    default: _withCtx(() => [_createVNode(_component_MarkerCluster, null, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.locations, (location, i) => {\n        return _openBlock(), _createBlock(_component_Marker, {\n          options: {\n            position: location\n          },\n          key: i,\n          onClick: $event => _ctx.showMarkerInfo(i)\n        }, {\n          default: _withCtx(() => [_createVNode(_component_InfoWindow, null, {\n            default: _withCtx(() => [_createCommentVNode(\" Marker 클릭하면 나오는 부분 \"), _createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _createCommentVNode(\"  \"), _ctx.detailPlaceInfo ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_3, _toDisplayString(this.detailPlaceInfo.name), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 가게 이름 \"), _createElementVNode(\"div\", _hoisted_4, [_ctx.detailPlaceInfo ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, [_createCommentVNode(\" 도로명 주소 formatted_address \"), _createTextVNode(\" \" + _toDisplayString(this.detailPlaceInfo.formatted_address), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _ctx.detailPlaceInfo ? (_openBlock(), _createElementBlock(\"p\", _hoisted_6, [_createCommentVNode(\" 별점 rating \"), _createTextVNode(\" \" + _toDisplayString(this.detailPlaceInfo.rating), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _hoisted_7, _createCommentVNode(\"              <div>\"), _createCommentVNode(\"                <img src=\\\"https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=AcJnMuEOKrWrFJWjgJ0hP9z6YEAW_sFK_EjE8YGfW4OpXVjrKGOFylnNfvubR_pNu19Gpob7ftOzYggMoq2wWtToKc0LQkhMRBll8X5HDuBpME1W9VYH8JmSYj_VeQL2vny-bKmEP-tSFfFAcpdf1AMwpdF6VrLEaXUzsRoj4qemUB_ekuhk&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\\\">\"), _createCommentVNode(\"              </div>\"), _ctx.dbInputData.detailinfo ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _toDisplayString(this.dbInputData.detailinfo), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])])]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"options\", \"onClick\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"center\", \"onKeyup\"]);\n}","map":{"version":3,"names":["id","_createElementVNode","class","href","_createBlock","_component_GoogleMap","style","center","_ctx","zoom","language","onKeyup","_withKeys","mapEnter","_createVNode","_component_MarkerCluster","_createElementBlock","_Fragment","_renderList","locations","location","i","_component_Marker","options","position","key","onClick","$event","showMarkerInfo","_component_InfoWindow","_createCommentVNode","_hoisted_1","_hoisted_2","detailPlaceInfo","_hoisted_3","_toDisplayString","name","_hoisted_4","_hoisted_5","formatted_address","_hoisted_6","rating","_hoisted_7","dbInputData","detailinfo","_hoisted_8"],"sources":["C:\\TeamProject\\VeganLoadMap\\src\\components\\Map.vue"],"sourcesContent":["<template>\r\n  <GoogleMap\r\n      api-key=\"AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\"\r\n      style=\"width: 100%; height: 500px\"\r\n      :center=\"center\"\r\n      :zoom=\"17\"\r\n      language=\"kor\"\r\n      @keyup.enter=\"mapEnter\"\r\n  >\r\n    <MarkerCluster>\r\n      <Marker v-for=\"(location, i) in locations\" :options=\"{ position: location }\" :key=\"i\"\r\n              @click=\"showMarkerInfo(i)\">\r\n        <InfoWindow>  <!-- Marker 클릭하면 나오는 부분 -->\r\n          <div id=\"contet\">\r\n            <div id=\"siteNotice\"></div> <!--  -->\r\n            <h1 id=\"firstHeading\" class=\"firstHeading\" v-if=\"detailPlaceInfo\" href=\"/\">{{ this.detailPlaceInfo.name }}</h1> <!-- 가게 이름 -->\r\n            <div id=\"bodyContent\">\r\n              <p v-if=\"detailPlaceInfo\">  <!-- 도로명 주소 formatted_address -->\r\n                {{ this.detailPlaceInfo.formatted_address }}\r\n              </p>\r\n              <p v-if=\"detailPlaceInfo\">  <!-- 별점 rating -->\r\n                {{ this.detailPlaceInfo.rating }}\r\n              </p>\r\n              <p>Marker Info Place</p>\r\n              <!--              <div>-->\r\n              <!--                <img src=\"https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=AcJnMuEOKrWrFJWjgJ0hP9z6YEAW_sFK_EjE8YGfW4OpXVjrKGOFylnNfvubR_pNu19Gpob7ftOzYggMoq2wWtToKc0LQkhMRBll8X5HDuBpME1W9VYH8JmSYj_VeQL2vny-bKmEP-tSFfFAcpdf1AMwpdF6VrLEaXUzsRoj4qemUB_ekuhk&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk\">-->\r\n              <!--              </div>-->\r\n              <div v-if=\"dbInputData.detailinfo\">\r\n                {{ this.dbInputData.detailinfo }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </InfoWindow>\r\n      </Marker>\r\n    </MarkerCluster>\r\n  </GoogleMap>\r\n</template>\r\n\r\n<script>\r\nimport { ref, defineComponent } from 'vue'\r\nimport { GoogleMap, Marker, MarkerCluster, InfoWindow } from 'vue3-google-map'\r\nimport axios from \"axios\";\r\n\r\nexport default defineComponent({\r\n  components: {GoogleMap, Marker, MarkerCluster, InfoWindow},\r\n  setup() {\r\n\r\n    // googleMap에 Marker 세팅\r\n    const locations = ref([\r\n      {lat: 37.5593773, lng: 126.832661},\r\n      {lat: 37.55795, lng: 126.8397055},\r\n    ]);\r\n\r\n    const dbInputData = ref( { // db에 넣기 위한 객체\r\n      storename : '',\r\n      placeid : '',\r\n      detailinfo : '',\r\n      location : '',\r\n      rating : '',\r\n      phonenumber : '',\r\n      lat : '',\r\n      lng : '',\r\n      image1: '',\r\n      image2: '',\r\n      image3: '',\r\n      image4: '',\r\n      image5: '',\r\n    });\r\n\r\n\r\n    const showMarkerInfo = async (index) => {\r\n      try {\r\n        // 사용자가 클릭한 마커의 정보\r\n        const location = locations.value[index];\r\n        const lat = location.lat;\r\n        const lng = location.lng;\r\n        console.log(`마커 클릭 - lat: ${lat}, lng: ${lng}`);\r\n\r\n        axios.get(\"/api/map\", {\r\n          params: {\r\n            lat: lat,\r\n            lng: lng,\r\n          }\r\n        })\r\n            .then(res => {\r\n              console.log(res)\r\n              const data = res.data;\r\n\r\n              console.log(\"data => \" + data);\r\n            }).catch(err => {\r\n          console.log(err);\r\n        })\r\n\r\n      } catch (error) {\r\n        console.error('Fetch error:', error);\r\n      }\r\n    };\r\n\r\n\r\n    return { ref, locations, showMarkerInfo, dbInputData }\r\n  },  // setup()\r\n  data() {\r\n    return {\r\n      center : {lat: 37.561736, lng: 126.835419},  // googleMap의 처음 시작 좌표\r\n      jsonData : null,  // nearby search로 얻은 주변 전체 JSON Data\r\n      detailPlaceInfo : null, // place_id로 얻은 한 장소에 대한 JSON Data\r\n\r\n      // dbInputData : { // db에 넣기 위한 객체\r\n      //   storename : '',\r\n      //   placeid : '',\r\n      //   detailinfo : '',\r\n      //   location : '',\r\n      //   rating : '',\r\n      //   phonenumber : '',\r\n      //   lat : '',\r\n      //   lng : '',\r\n      //   image1: '',\r\n      //   image2: '',\r\n      //   image3: '',\r\n      //   image4: '',\r\n      //   image5: '',\r\n      // },\r\n\r\n      // db에서 받아와 지도 현위치 기능에 쓰일 lat, lng, place_id\r\n      dbLat: '',\r\n      dbLng: '',\r\n      dbPlaceId: '',\r\n\r\n      // mapEnter 실행 후 주변 음식점을 지도에 찍을 마커의 latlng 배열\r\n      locationArray: [],\r\n      mapKey: 0,  // 구글맵을 다시 렌더링하기 위한 키, 값이 변하면 재렌더링 된다\r\n\r\n\r\n    };\r\n  },  // data()\r\n  methods: {\r\n    //   showMarkerInfo: async (index) => {  // place_id로 googleMap JSON Data를 Parsing\r\n    //   try {\r\n    //     fetch('https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=ChIJrQcG0R-dfDUREPJPWnn6jv0&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk', {\r\n    //       headers: {\r\n    //         'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\r\n    //       }\r\n    //     })\r\n    //         .then(res => res.json())\r\n    //         .then(res => {\r\n    //           this.detailPlaceInfo = res.result;\r\n    //         })\r\n    //\r\n    //     const location = this.locations[index];\r\n    //     const lat = location.lat;\r\n    //     const lng = location.lng;\r\n    //     console.log(`마커 클릭 - lat: ${lat}, lng: ${lng}`);\r\n    //   } catch (error) {\r\n    //     // 오류 처리\r\n    //     console.error('Fetch error:', error);\r\n    //     // 또는 다른 조치를 취할 수 있음\r\n    //   }\r\n    //\r\n    // },  // showMarkerInfo\r\n    getCurrentUserLocation: function () {  // User의 현재 위치 가져오기\r\n      return new Promise((resolve, reject) => {\r\n        navigator.geolocation.getCurrentPosition(\r\n            (position) => {\r\n              const location = {\r\n                enableHighAccuracy: true, // 정확도 향상\r\n                lat: position.coords.latitude,\r\n                lng: position.coords.longitude,\r\n              };\r\n\r\n              resolve(location);\r\n            },\r\n            (error) => {\r\n              reject(error);\r\n            }\r\n        )\r\n      })\r\n    }, // getCurrentUserLocation\r\n    async setInputData() {  // nearbysearch로 얻은 데이터를 db에 넣기 전 dbInputData 객체에 세팅\r\n      let jsonData;\r\n      try {\r\n        fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.center.lat},%20${this.center.lng}&rankby=distance&name=채식&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\r\n          headers: {\r\n            'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\r\n          }\r\n        })\r\n            .then(res => res.json())\r\n            .then(async res => {\r\n              jsonData = res;\r\n\r\n              // 최대 20개의 데이터를 dbInputData에 담는다\r\n              this.dbInputData = jsonData.results.slice(0, 20)\r\n                  .filter(data => data.rating >= 4)  //data의 rating이 4 이상이어야 입력\r\n                  .map(data => ({\r\n                    storename: data.name,\r\n                    placeid: data.place_id,\r\n\r\n                    location: data.vicinity,\r\n                    rating: data.rating,\r\n                    lat: data.geometry.location.lat,\r\n                    lng: data.geometry.location.lng,\r\n                  }));\r\n\r\n              // data.place_id 값을 setInputData_placeid 메서드로 전달\r\n              this.dbInputData.forEach(data => {\r\n                this.setInputData_placeid(data.placeid);\r\n              });\r\n            });\r\n      } catch (error) {\r\n        // 오류 처리\r\n        console.error('Fetch error:', error);\r\n        this.errorMessage = 'Failed to fetch data. Please try again later.';\r\n        // 또는 다른 조치를 취할 수 있음\r\n      }\r\n    }, // setInputData\r\n    // place_id로 가져온 api로 dbInputData에 입력\r\n    async setInputData_placeid(temp_place_id) {\r\n      let jsonData;\r\n      try {\r\n        fetch(`https://proxy.cors.sh/https://maps.googleapis.com/maps/api/place/details/json?placeid=${temp_place_id}&key=AIzaSyB21eMRg-uMRk-i7r27DPDkntXbR5_kvnk`, {\r\n          headers: {\r\n            'x-cors-api-key': 'temp_924d232f48d59dabc25af9778ab72f25'\r\n          }\r\n        })\r\n            .then(res => res.json())\r\n            .then(async res => {\r\n              jsonData = res;\r\n\r\n              // detailinfo에 weekday_text 배열 안의 문자열을 하나씩 붙여서 담을 임시 변수\r\n              let temp_detailinfo = '';\r\n\r\n              // 위에서 forEach로 돌면서 다 가져옴\r\n              // place_id가 일치하면 phonenumber를 저장\r\n              for (let i=0; i<this.dbInputData.length; i++) {\r\n                if (this.dbInputData[i].placeid === temp_place_id) {\r\n                  this.dbInputData[i].phonenumber = jsonData.result.formatted_phone_number;\r\n                  // 일주일의 영업 정보를 detailinfo에 저장\r\n                  if(jsonData.result && jsonData.result.opening_hours && jsonData.result.opening_hours.weekday_text){\r\n                    for(let k=0; k<jsonData.result.opening_hours.weekday_text.length; k++){\r\n                      if(jsonData.result.opening_hours.weekday_text[k])\r\n                        temp_detailinfo += (jsonData.result.opening_hours.weekday_text[k] + \"\\n\");\r\n                    }\r\n                    this.dbInputData[i].detailinfo = temp_detailinfo;\r\n                  }\r\n\r\n                  break; // 원하는 요소를 찾았으면 루프 종료\r\n                }\r\n              }\r\n\r\n              // image 저장\r\n              for (let i = 0; i < this.dbInputData.length; i++) {\r\n                if (this.dbInputData[i].placeid === temp_place_id) {\r\n                  if(jsonData.result && jsonData.result.photos && jsonData.result.photos.length>6) {\r\n                    if (jsonData.result.photos[0].photo_reference)\r\n                      this.dbInputData[i].image1 = jsonData.result.photos[0].photo_reference;\r\n\r\n                    if (jsonData.result.photos[1].photo_reference)\r\n                      this.dbInputData[i].image2 = jsonData.result.photos[1].photo_reference;\r\n\r\n                    if (jsonData.result.photos[2].photo_reference)\r\n                      this.dbInputData[i].image3 = jsonData.result.photos[2].photo_reference;\r\n\r\n                    if (jsonData.result.photos[3].photo_reference)\r\n                      this.dbInputData[i].image4 = jsonData.result.photos[3].photo_reference;\r\n\r\n                    if (jsonData.result.photos[4].photo_reference)\r\n                      this.dbInputData[i].image5 = jsonData.result.photos[4].photo_reference;\r\n\r\n                    break; // 원하는 요소를 찾았으면 루프 종료\r\n                  }\r\n\r\n                }\r\n              }\r\n            });\r\n      } catch (error) {\r\n        // 오류 처리\r\n        console.error('Fetch error:', error);\r\n        this.errorMessage = 'Failed to fetch data. Please try again later.';\r\n        // 또는 다른 조치를 취할 수 있음\r\n      }\r\n    },  // setInputData_placeid\r\n    updateLocations(locations) {\r\n      this.locationArray = this.locationArray.concat(locations);\r\n    },\r\n    // map에서 enter Key를 눌렀을 때의 event. (주변 음식점이 db에 등록 됨)\r\n    mapEnter : function() {\r\n      // db에 넣기\r\n      for(var i=0; i<this.dbInputData.length; i++){\r\n        this.updateLocations([{ lat: this.dbInputData[i].lat, lng: this.dbInputData[i].lng }])\r\n\r\n\r\n        axios.post(\"/api/map\", this.dbInputData[i])\r\n            .then(res => {\r\n              console.log(res);\r\n            }).catch(err => {\r\n          console.log(err);\r\n        })\r\n      }\r\n\r\n      this.locations = this.locationArray;\r\n      this.mapKey++;\r\n\r\n    }, // mapEnter\r\n\r\n\r\n  },  // method()\r\n  async mounted() {\r\n\r\n    try {\r\n      // getCurrentUserLocation()으로 user의 currentLocation을 googleMap center로 설정\r\n      this.center = await this.getCurrentUserLocation();\r\n    } catch (error) {\r\n      console.log(\"Error User Location : \" + error);\r\n    }\r\n\r\n    this.setInputData();\r\n  },  // mounted()\r\n})\r\n</script>"],"mappings":";;EAaeA,EAAE,EAAC;AAAQ;gCACdC,mBAAA,CAA2B;EAAtBD,EAAE,EAAC;AAAY;;;EAChBA,EAAE,EAAC,cAAc;EAACE,KAAK,EAAC,cAAc;EAAwBC,IAAI,EAAC;;;EAClEH,EAAE,EAAC;AAAa;;;;;;;gCAOnBC,mBAAA,CAAwB,WAArB,mBAAiB;;;;;;;;;uBAtBhCG,YAAA,CAkCYC,oBAAA;IAjCR,SAAO,EAAC,yCAAyC;IACjDC,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAAkC;IACjCC,MAAM,EAAEC,IAAA,CAAAD,MAAM;IACdE,IAAI,EAAE,EAAE;IACTC,QAAQ,EAAC,KAAK;IACbC,OAAK,EAAAC,SAAA,CAAQJ,IAAA,CAAAK,QAAQ;;sBAExB,MAyBgB,CAzBhBC,YAAA,CAyBgBC,wBAAA;wBAxBN,MAAkC,E,kBAA1CC,mBAAA,CAuBSC,SAAA,QAAAC,WAAA,CAvBuBV,IAAA,CAAAW,SAAS,GAAzBC,QAAQ,EAAEC,CAAC;6BAA3BjB,YAAA,CAuBSkB,iBAAA;UAvBmCC,OAAO;YAAAC,QAAA,EAAcJ;UAAQ;UAAKK,GAAG,EAAEJ,CAAC;UAC3EK,OAAK,EAAAC,MAAA,IAAEnB,IAAA,CAAAoB,cAAc,CAACP,CAAC;;4BAC9B,MAoBa,CApBbP,YAAA,CAoBae,qBAAA;8BApBC,MAA2B,CAA3BC,mBAAA,wBAA2B,EACvC7B,mBAAA,CAkBM,OAlBN8B,UAkBM,GAjBJC,UAA2B,EAACF,mBAAA,MAAS,EACYtB,IAAA,CAAAyB,eAAe,I,cAAhEjB,mBAAA,CAA+G,MAA/GkB,UAA+G,EAAAC,gBAAA,MAA5BF,eAAe,CAACG,IAAI,oB,mCAASN,mBAAA,WAAc,EAC9H7B,mBAAA,CAcM,OAdNoC,UAcM,GAbK7B,IAAA,CAAAyB,eAAe,I,cAAxBjB,mBAAA,CAEI,KAAAsB,UAAA,GAFwBR,mBAAA,8BAAiC,E,iBAAA,GAC3D,GAAAK,gBAAA,MAAQF,eAAe,CAACM,iBAAiB,iB,wCAElC/B,IAAA,CAAAyB,eAAe,I,cAAxBjB,mBAAA,CAEI,KAAAwB,UAAA,GAFwBV,mBAAA,eAAkB,E,iBAAA,GAC5C,GAAAK,gBAAA,MAAQF,eAAe,CAACQ,MAAM,iB,wCAEhCC,UAAwB,EACxBZ,mBAAA,uBAA0B,EAC1BA,mBAAA,gVAAiV,EACjVA,mBAAA,wBAA2B,EAChBtB,IAAA,CAAAmC,WAAW,CAACC,UAAU,I,cAAjC5B,mBAAA,CAEM,OAAA6B,UAAA,EAAAV,gBAAA,MADIQ,WAAW,CAACC,UAAU,oB"},"metadata":{},"sourceType":"module","externalDependencies":[]}