{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      reviews: [],\n      nickname: '',\n      newReview: {\n        seq: '',\n        storeid: '',\n        content: '',\n        image: ''\n      }\n    };\n  },\n  created() {\n    this.fetchReview();\n  },\n  methods: {\n    fetchReview() {\n      axios.get(\"/api/review/list\").then(response => {\n        this.reviews = response.data.reviewList;\n        this.nickname = response.data.nickname;\n      }).catch(error => {\n        console.error(\"Error fetching reviews\", error);\n      });\n    },\n    uploadImg() {\n      var image = this.$refs['image'].files[0];\n      const url = URL.createObjectURL(image);\n      this.image = url;\n      this.newReview.image = this.image;\n      console.log(url);\n      console.log(this.image);\n    },\n    addReview() {\n      axios.post(\"/api/review/insert\", this.newReview).then(response => {\n        console.log(\"Review added successfully\", response);\n        this.fetchReview(); // Fetch reviews again to get the updated list\n        this.newReview = {\n          storeid: '',\n          content: '',\n          image: ''\n        };\n        alert(\"리뷰가 등록되었습니다.\");\n      }).catch(error => {\n        console.error(\"Error adding review\", error);\n      });\n    },\n    deleteReview(review) {\n      axios.delete(`/api/review/delete/${review.seq}`) // Assuming seq is the identifier for the review\n      .then(() => {\n        this.fetchReview();\n      }).catch(error => {\n        console.error(\"Error delete review\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","reviews","nickname","newReview","seq","storeid","content","image","created","fetchReview","methods","get","then","response","reviewList","catch","error","console","uploadImg","$refs","files","url","URL","createObjectURL","log","addReview","post","alert","deleteReview","review","delete"],"sources":["C:\\TeamProject\\VeganLoadMap\\src\\components\\review\\Review.vue"],"sourcesContent":["<template>\r\n  <header>Review</header>\r\n  <div id=\"reviewContainer\" class=\"container\" style=\"margin-left: -3px\">\r\n    <form @submit.prevent=\"addReview\">\r\n      <label></label>\r\n      <textarea name=\"content\" v-model=\"newReview.content\"\r\n                placeholder=\"식당을 이용하신 후 자유롭게 의견을 나눠주세요. 음식의 맛, 서비스, 분위기 등을 자세히 기술해주시면 다른 이용자들에게 큰 도움이 됩니다.\"></textarea>\r\n\r\n      <!--<button v-on:click=\"addReview()\">Send</button>-->\r\n      <input ref=\"image\" @change=\"uploadImg()\" type=\"file\" id=\"chooseFile\" name=\"chooseFile\" accept=\"image/*\">\r\n      <button type=\"submit\">등록</button>\r\n    </form>\r\n    <div v-for=\"review in reviews\" :key=\"review.seq\" class=\"review\">\r\n      <input type=\"hidden\" v-model=\"review.seq\"/>\r\n      <input type=\"hidden\" v-model=\"review.storeid\"/>\r\n\r\n      <div class=\"review-photo\">\r\n        <img v-bind:src=\"review.image\">\r\n      </div>\r\n\r\n      <div class=\"review-box\">\r\n\r\n        <div class=\"review-author\">\r\n          <p><strong>{{ review.writer }}</strong></p>\r\n        </div>\r\n        <div class=\"review-comment\">\r\n          <p>{{ review.content }}</p>\r\n        </div>\r\n      </div>\r\n      <!--      <button v-if=\"review.writer === nickname\" type=\"button\" @click=\"goToReviewUpdatePage(review)\">수정</button>-->\r\n      <!--      <router-link to=\"/review_update\"><button v-if=\"review.writer === nickname\" type=\"button\">수정</button></router-link>-->\r\n      <router-link :to=\"{ name: 'review_update', params: { value: review.seq } }\"><button v-if=\"review.writer === nickname\" type=\"button\">수정</button></router-link>\r\n\r\n      <button v-if=\"review.writer === nickname\" type=\"button\" @click=\"deleteReview(review)\">삭제</button>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      reviews: [],\r\n      nickname: '',\r\n      newReview: {\r\n        seq: '',\r\n        storeid: '',\r\n        content: '',\r\n        image: '',\r\n      },\r\n\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchReview();\r\n  },\r\n  methods: {\r\n    fetchReview() {\r\n      axios\r\n          .get(\"/api/review/list\")\r\n          .then((response) => {\r\n            this.reviews = response.data.reviewList;\r\n            this.nickname = response.data.nickname;\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error fetching reviews\", error);\r\n          });\r\n    },uploadImg() {\r\n      var image = this.$refs['image'].files[0]\r\n      const url = URL.createObjectURL(image)\r\n      this.image = url\r\n      this.newReview.image = this.image;\r\n      console.log(url)\r\n      console.log(this.image)\r\n    },\r\n    addReview() {\r\n      axios\r\n          .post(\"/api/review/insert\", this.newReview)\r\n          .then((response) => {\r\n            console.log(\"Review added successfully\", response);\r\n            this.fetchReview(); // Fetch reviews again to get the updated list\r\n            this.newReview = {\r\n              storeid: '',\r\n              content: '',\r\n              image: '',\r\n            };\r\n            alert(\"리뷰가 등록되었습니다.\");\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error adding review\", error);\r\n          });\r\n    },\r\n    deleteReview(review) {\r\n      axios\r\n          .delete(`/api/review/delete/${review.seq}`) // Assuming seq is the identifier for the review\r\n          .then(() => {\r\n            this.fetchReview();\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error delete review\", error);\r\n          });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nheader {\r\n  width: 80%;\r\n  font-size: 2em;\r\n  text-align: center;\r\n  background: #2ecc71;\r\n  color: #fff;\r\n  margin: 0 auto;\r\n  padding: 0.5em;\r\n}\r\n\r\nbody {\r\n  max-width: 1024px;\r\n  margin: 20px auto;\r\n  font-size: 16px;\r\n  font-family: 'Poppins', sans-serif;\r\n}\r\n\r\nimg {\r\n  max-width: 100%;\r\n  display: block;\r\n}\r\n\r\np {\r\n  margin: 0;\r\n}\r\n\r\nlabel {\r\n  width: 15%;\r\n  margin: 10px 1% 0 0;\r\n  display: inline-block;\r\n  float: left;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  width: 84%;\r\n  margin: 10px 0;\r\n  height: 40px;\r\n  border: none;\r\n  background: #F6F6F6;\r\n  padding: 1em;\r\n}\r\n\r\ntextarea {\r\n  width: 84%;\r\n  border: none;\r\n  background: #F6F6F6;\r\n  margin: 10px auto;\r\n  height: 100px;\r\n  padding: 1em;\r\n  border-radius: 20px;\r\n  text-align: center;\r\n\r\n}\r\n\r\nbutton {\r\n  float: right;\r\n  width: 20%;\r\n  height: 40px;\r\n  border: none;\r\n  background: #2ecc71;\r\n  font-size: 16px;\r\n  color: white;\r\n}\r\n\r\n.review {\r\n  width: 100%;\r\n  display: inline-block;\r\n  margin: 10px 0;\r\n}\r\n\r\n.review-photo {\r\n  height: 80px;\r\n  width: 80px;\r\n  display: inline-block;\r\n  float: left;\r\n  margin-right: 3em;\r\n}\r\n\r\n.review-box {\r\n  float: left;\r\n  display: inline-block;\r\n  width: 87.5%;\r\n  background: #F6F6F6;\r\n  padding: 1.5em;\r\n  position: relative;\r\n}\r\n\r\n.review-box:after, .review-box:before {\r\n  right: 100%;\r\n  top: 10%;\r\n  border: solid transparent;\r\n  content: \" \";\r\n  height: 0;\r\n  width: 0;\r\n  position: absolute;\r\n  pointer-events: none;\r\n}\r\n\r\n.review-box:after {\r\n  border-right-color: #F6F6F6;\r\n  border-width: 25px;\r\n}\r\n\r\n.review-comment {\r\n  color: #9A9999;\r\n}\r\n\r\n.review-date {\r\n  color: #C7C7C7;\r\n}\r\n\r\n.review-author {\r\n  color: #C7C7C7;\r\n}\r\n\r\n.review-author strong {\r\n  color: black;\r\n}\r\n</style>"],"mappings":";;;AAuCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;QACTC,GAAG,EAAE,EAAE;QACPC,OAAO,EAAE,EAAE;QACXC,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE;MACT;IAEF,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACPD,WAAWA,CAAA,EAAG;MACZV,KAAI,CACCY,GAAG,CAAC,kBAAkB,EACtBC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACZ,OAAM,GAAIY,QAAQ,CAACb,IAAI,CAACc,UAAU;QACvC,IAAI,CAACZ,QAAO,GAAIW,QAAQ,CAACb,IAAI,CAACE,QAAQ;MACxC,CAAC,EACAa,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;IACR,CAAC;IAACE,SAASA,CAAA,EAAG;MACZ,IAAIX,KAAI,GAAI,IAAI,CAACY,KAAK,CAAC,OAAO,CAAC,CAACC,KAAK,CAAC,CAAC;MACvC,MAAMC,GAAE,GAAIC,GAAG,CAACC,eAAe,CAAChB,KAAK;MACrC,IAAI,CAACA,KAAI,GAAIc,GAAE;MACf,IAAI,CAAClB,SAAS,CAACI,KAAI,GAAI,IAAI,CAACA,KAAK;MACjCU,OAAO,CAACO,GAAG,CAACH,GAAG;MACfJ,OAAO,CAACO,GAAG,CAAC,IAAI,CAACjB,KAAK;IACxB,CAAC;IACDkB,SAASA,CAAA,EAAG;MACV1B,KAAI,CACC2B,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAACvB,SAAS,EACzCS,IAAI,CAAEC,QAAQ,IAAK;QAClBI,OAAO,CAACO,GAAG,CAAC,2BAA2B,EAAEX,QAAQ,CAAC;QAClD,IAAI,CAACJ,WAAW,CAAC,CAAC,EAAE;QACpB,IAAI,CAACN,SAAQ,GAAI;UACfE,OAAO,EAAE,EAAE;UACXC,OAAO,EAAE,EAAE;UACXC,KAAK,EAAE;QACT,CAAC;QACDoB,KAAK,CAAC,cAAc,CAAC;MACvB,CAAC,EACAZ,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C,CAAC,CAAC;IACR,CAAC;IACDY,YAAYA,CAACC,MAAM,EAAE;MACnB9B,KAAI,CACC+B,MAAM,CAAE,sBAAqBD,MAAM,CAACzB,GAAI,EAAC,EAAE;MAAA,CAC3CQ,IAAI,CAAC,MAAM;QACV,IAAI,CAACH,WAAW,CAAC,CAAC;MACpB,CAAC,EACAM,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C,CAAC,CAAC;IACR;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}