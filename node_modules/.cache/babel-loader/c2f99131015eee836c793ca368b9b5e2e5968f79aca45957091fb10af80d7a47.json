{"ast":null,"code":"import router from \"@/scripts/router\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      currentTime: new Date(),\n      paymentid: null,\n      paymentData: {},\n      timeArr: [],\n      createdAt: ''\n    };\n  },\n  async mounted() {\n    this.paymentid = router.currentRoute.value.params.value;\n    try {\n      const response = await axios.get(`/api/paymentSuccess/${this.paymentid}`, this.paymentid);\n      this.paymentData = response.data;\n      let combined_date = '';\n      for (let i = 0; i < this.paymentData.created_at.length; i++) {\n        combined_date += this.paymentData.created_at[i];\n      }\n      console.log(\"combined => \" + combined_date);\n      this.createdAt = combined_date;\n      this.timeArr = this.paymentData.created_at;\n    } catch (error) {\n      console.error('Error while fetching data:', error);\n    }\n  },\n  computed: {\n    formattedDate() {\n      const [year, month, day, hour, minute, second] = this.timeArr;\n      const date = new Date(year, month - 1, day, hour, minute, second);\n      return this.formatDate(date);\n    }\n  },\n  methods: {\n    formatDate(date) {\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const day = date.getDate().toString().padStart(2, '0');\n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      const seconds = date.getSeconds().toString().padStart(2, '0');\n      return `${year}년 ${month}월 ${day}일 ${hours}:${minutes}:${seconds}`;\n    }\n  }\n};","map":{"version":3,"names":["router","axios","data","currentTime","Date","paymentid","paymentData","timeArr","createdAt","mounted","currentRoute","value","params","response","get","combined_date","i","created_at","length","console","log","error","computed","formattedDate","year","month","day","hour","minute","second","date","formatDate","methods","getFullYear","getMonth","toString","padStart","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds"],"sources":["/Users/soohykim/Desktop/front/src/components/payment/PaymentSuccess.vue"],"sourcesContent":["<template>\n  <!-- data 객체 내용을 출력 -->\n  <ul>\n    <li><p>Payment ID : {{ paymentData.paymentid }}</p></li>\n    <li><p>StoreName : {{ paymentData.storename }}</p></li>\n    <li><p>User ID : {{ paymentData.userid }}</p></li>\n    <li><p>Price : {{ paymentData.price }}</p></li>\n    <li><p>Status : {{ paymentData.status }}</p></li>\n    <li><p>formatTime : {{ formattedDate }}</p></li>\n  </ul>\n</template>\n\n<script>\nimport router from \"@/scripts/router\";\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      currentTime: new Date(),\n      paymentid : null,\n      paymentData : {},\n      timeArr : [],\n      createdAt : '',\n\n    };\n  },\n  async mounted() {\n    this.paymentid = router.currentRoute.value.params.value;\n\n    try {\n      const response = await axios.get(`/api/paymentSuccess/${this.paymentid}`, this.paymentid);\n\n\n      this.paymentData = response.data;\n\n      let combined_date = '';\n\n      for(let i=0; i<this.paymentData.created_at.length; i++) {\n        combined_date += this.paymentData.created_at[i];\n      }\n      console.log(\"combined => \" + combined_date);\n      this.createdAt = combined_date;\n      this.timeArr = this.paymentData.created_at;\n\n    } catch (error) {\n      console.error('Error while fetching data:', error);\n    }\n  },\n  computed: {\n    formattedDate() {\n      const [year, month, day, hour, minute, second] = this.timeArr;\n      const date = new Date(year, month - 1, day, hour, minute, second);\n      return this.formatDate(date);\n    }\n  },\n  methods: {\n    formatDate(date) {\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const day = date.getDate().toString().padStart(2, '0');\n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      const seconds = date.getSeconds().toString().padStart(2, '0');\n\n      return `${year}년 ${month}월 ${day}일 ${hours}:${minutes}:${seconds}`;\n    }\n  },\n};\n</script>"],"mappings":"AAaA,OAAOA,MAAK,MAAO,kBAAkB;AACrC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC;MACvBC,SAAQ,EAAI,IAAI;MAChBC,WAAU,EAAI,CAAC,CAAC;MAChBC,OAAM,EAAI,EAAE;MACZC,SAAQ,EAAI;IAEd,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI,CAACJ,SAAQ,GAAIL,MAAM,CAACU,YAAY,CAACC,KAAK,CAACC,MAAM,CAACD,KAAK;IAEvD,IAAI;MACF,MAAME,QAAO,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAAE,uBAAsB,IAAI,CAACT,SAAU,EAAC,EAAE,IAAI,CAACA,SAAS,CAAC;MAGzF,IAAI,CAACC,WAAU,GAAIO,QAAQ,CAACX,IAAI;MAEhC,IAAIa,aAAY,GAAI,EAAE;MAEtB,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAACV,WAAW,CAACW,UAAU,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QACtDD,aAAY,IAAK,IAAI,CAACT,WAAW,CAACW,UAAU,CAACD,CAAC,CAAC;MACjD;MACAG,OAAO,CAACC,GAAG,CAAC,cAAa,GAAIL,aAAa,CAAC;MAC3C,IAAI,CAACP,SAAQ,GAAIO,aAAa;MAC9B,IAAI,CAACR,OAAM,GAAI,IAAI,CAACD,WAAW,CAACW,UAAU;IAE5C,EAAE,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,IAAI,IAAI,CAACtB,OAAO;MAC7D,MAAMuB,IAAG,GAAI,IAAI1B,IAAI,CAACoB,IAAI,EAAEC,KAAI,GAAI,CAAC,EAAEC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,CAAC;MACjE,OAAO,IAAI,CAACE,UAAU,CAACD,IAAI,CAAC;IAC9B;EACF,CAAC;EACDE,OAAO,EAAE;IACPD,UAAUA,CAACD,IAAI,EAAE;MACf,MAAMN,IAAG,GAAIM,IAAI,CAACG,WAAW,CAAC,CAAC;MAC/B,MAAMR,KAAI,GAAI,CAACK,IAAI,CAACI,QAAQ,CAAC,IAAI,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC/D,MAAMV,GAAE,GAAII,IAAI,CAACO,OAAO,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACtD,MAAME,KAAI,GAAIR,IAAI,CAACS,QAAQ,CAAC,CAAC,CAACJ,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACzD,MAAMI,OAAM,GAAIV,IAAI,CAACW,UAAU,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC7D,MAAMM,OAAM,GAAIZ,IAAI,CAACa,UAAU,CAAC,CAAC,CAACR,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAE7D,OAAQ,GAAEZ,IAAK,KAAIC,KAAM,KAAIC,GAAI,KAAIY,KAAM,IAAGE,OAAQ,IAAGE,OAAQ,EAAC;IACpE;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}