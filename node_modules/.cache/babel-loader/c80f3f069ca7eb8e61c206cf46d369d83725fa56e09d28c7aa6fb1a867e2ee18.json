{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.requestPay && $options.requestPay(...args))\n  }, \"결제하기\"), _createCommentVNode(\" 결제하기 버튼 생성 \")]), _createElementVNode(\"p\", null, _toDisplayString($data.mUidDate), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","onClick","_cache","args","$options","requestPay","_createCommentVNode","_toDisplayString","$data","mUidDate"],"sources":["/Users/soohykim/Desktop/front/src/components/payment/Payment.vue"],"sourcesContent":["<template>\n  <div>\n    <button @click=\"requestPay\">결제하기</button>\n    <!-- 결제하기 버튼 생성 -->\n  </div>\n  <p>{{ mUidDate }}</p>\n</template>\n\n\n<script>\nimport axios from \"axios\";\nimport router from \"@/scripts/router\";\n\nexport default {\n  data() {\n    return {\n      currentTime : new Date(),\n      mUidDate : '',  // merchant_uid에 붙일 값. 현재시간을 yyMMdd_HHmmss식으로 가져와서 중복 방지\n    }\n  },\n  methods: {\n    // 결제\n    requestPay: function () {\n      const { IMP } = window;\n\n      IMP.init('imp70364071');\n      // https://developers.portone.io/docs/ko/sdk/javascript-sdk/payrq >> 파라미터 정리 되어있음.\n      IMP.request_pay({ // param\n        pg: \"kcp.INIBillTst_inicis\",  // pg사 구분코드\n        pay_method: \"card\", // 결제수단 구분코드\n        merchant_uid: \"vrm_wando_\" + this.mUidDate,  // 가맹점 주문번호. 40bytes 이하. 매 거래시 다 달라야함. 거래고유코드라고 생각해도 될듯?\n        name: \"wando 결제테스트\",  // 결제대상 제품명 (상품명) > 상점명(storename + 예약) 으로 바꿔야할듯\n        amount: 50, // 결제 금액@@@@\n        buyer_email: '', // 주문자 이메일  > default로 저게 박힘\n        buyer_name: \"김도완\",  // 주문자 이름@@@@ > 김 * 완 으로 박혀있음\n      }, rsp => { // callback\n        if (rsp.success) {  // 결제 성공\n          console.log(\"rsp.success => \" + rsp)\n\n          const paymentData = {\n            paymentid: \"wando_\" + rsp.imp_uid,  // 포트원 고유 결제번호. success가 false이고 사전 validation에 실패한 경우, imp_uid는 null일 수 있음\n            storename: rsp.merchant_uid,\n            userid: '김도오오옹완',\n            price: rsp.paid_amount,\n            status: rsp.status, // 결제 성공 시에는 status\n            /* 결제상태\n                ready(브라우저 창 이탈, 가상계좌 발급 완료 등 미결제 상태)\n                paid(결제완료)\n                failed(신용카드 한도 초과, 체크카드 잔액 부족, 브라우저 창 종료 또는 취소 버튼 클릭 등 결제실패 상태) */\n          };\n\n          console.log(\"before post\")\n          console.log(paymentData.paymentid)\n          console.log(paymentData.storename)\n          console.log(paymentData.userid)\n          console.log(paymentData.price)\n          console.log(paymentData.status)\n\n          axios.post(\"/api/payment\", paymentData)\n              .then((data) => {\n                // 서버 결제 API 성공시 로직\n                console.log(data)\n                alert(\"결제 성공!\");\n\n                router.push({ name: \"PaymentSuccess\", params: { value : paymentData.paymentid } })\n              })\n              .catch((error) => {\n                // 서버 결제 API 실패 시 로직\n                console.log(error)\n                alert(\"DB 입력 API 요청 실패\");\n              });\n\n        } else {  // 결제 실패\n          const paymentData = {\n            paymentid: \"wando_\" + rsp.imp_uid,  // 포트원 고유 결제번호. success가 false이고 사전 validation에 실패한 경우, imp_uid는 null일 수 있음\n            storename: rsp.merchant_uid,\n            userid: \"김완도도도독\",\n            price: \"500000\",\n            status: rsp.success,  // 결제 실패 시에는 status가 할당되지 않아서 success.\n          };\n\n          axios.post(\"/api/payment\", paymentData)\n              .then((data) => {\n                // 서버 결제 API 실패 시 로직\n                console.log(data);\n                alert(\"결제에 실패했습니다. 에러 내용 : \" + rsp.error_msg)\n              })\n              .catch((error) => {\n                // 서버 결제 API 실패시 로직\n                console.log(error)\n                alert(\"DB 입력 API 요청 실패\");\n              });\n\n        }\n      });\n    }\n  },\n  computed: {\n    // yyMMdd_HHmmss 변환 후 merchant_uid에 붙임 ex)231031_224258\n    formattedCurrentTime() {\n      const date = this.currentTime;\n      const year = String(date.getFullYear()).slice(-2);\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n\n      return `${year}${month}${day}_${hours}${minutes}${seconds}`;\n    },\n  },\n  created() {\n    this.mUidDate = this.formattedCurrentTime\n  }\n}\n</script>"],"mappings":";;6DACEA,mBAAA,CAGM,cAFJA,mBAAA,CAAyC;IAAhCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;KAAE,MAAI,GAChCG,mBAAA,gBAAmB,C,GAErBN,mBAAA,CAAqB,WAAAO,gBAAA,CAAfC,KAAA,CAAAC,QAAQ,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}