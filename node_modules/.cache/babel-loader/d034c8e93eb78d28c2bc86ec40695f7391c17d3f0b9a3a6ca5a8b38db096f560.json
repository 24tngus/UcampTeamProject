{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive } from \"vue\";\nimport axios from \"axios\";\nimport store from \"@/scripts/store\";\nimport router from \"@/scripts/router\";\nimport Header from \"@/components/header/Header.vue\";\nexport default {\n  components: {\n    Header\n  },\n  setup() {\n    const state = reactive({\n      form: {\n        email: \"\",\n        password: \"\"\n      }\n    });\n    const googleSignIn = async () => {\n      try {\n        const googleUser = await gapi.auth2.getAuthInstance().signIn();\n        const idToken = googleUser.getAuthResponse().id_token;\n        // idToken을 사용하여 서버로 AJAX 요청 보내기\n        const googleEmail = googleUser.getBasicProfile().getEmail();\n        if (googleEmail !== 'undefined') {\n          console.log(googleEmail);\n        }\n      } catch (error) {\n        console.error(\"Google 로그인 실패:\", error);\n      }\n    };\n    const submit = () => {\n      axios.post(\"/api/account/login\", state.form).then(res => {\n        store.commit(\"setAccount\", res.data);\n        if (res.data === 0) {\n          if (state.form.email === \"\") {\n            window.alert(\"이메일을 입력해주세요\");\n          } else if (state.form.password === \"\") {\n            window.alert(\"비밀번호를 입력해주세요\");\n          } else {\n            window.alert(\"이메일이나 비밀번호가 틀립니다\");\n            router.push({\n              path: \"/login\"\n            });\n          }\n        } else {\n          window.alert(\"로그인 하였습니다\");\n          router.push({\n            path: \"/\"\n          });\n        }\n      });\n    };\n    return {\n      state,\n      submit,\n      googleSignIn\n    };\n  },\n  mounted() {\n    gapi.load('auth2', function () {\n      gapi.auth2.init();\n    });\n  }\n};","map":{"version":3,"names":["reactive","axios","store","router","Header","components","setup","state","form","email","password","googleSignIn","googleUser","gapi","auth2","getAuthInstance","signIn","idToken","getAuthResponse","id_token","googleEmail","getBasicProfile","getEmail","console","log","error","submit","post","then","res","commit","data","window","alert","push","path","mounted","load","init"],"sources":["C:\\VeganLoadMap\\src\\components\\user\\Login.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <Header/>\r\n    <div class=\"form-signin w-100 m-auto\">\r\n      <h1 class=\"h3 mb-3 fw-normal\">사용자 로그인</h1>\r\n\r\n      <div class=\"form-floating\">\r\n        <input type=\"email\" class=\"form-control\" id=\"floatingInput\" placeholder=\"name@example.com\" v-model=\"state.form.email\">\r\n        <label for=\"floatingInput\">이메일 입력</label>\r\n      </div>\r\n      <div class=\"form-floating\">\r\n        <input type=\"password\" class=\"form-control\" id=\"floatingPassword\" placeholder=\"Password\" v-model=\"state.form.password\">\r\n        <label for=\"floatingPassword\">비밀번호 입력</label>\r\n      </div>\r\n      <button class=\"btn\" @click=\"submit\">로그인</button> &nbsp;\r\n      <button class=\"btn\" @click=\"$router.push('/join2')\">회원가입</button>\r\n      <button class=\"btn\" @click=\"googleSignIn\">Google로 로그인</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive } from \"vue\";\r\nimport axios from \"axios\";\r\nimport store from \"@/scripts/store\";\r\nimport router from \"@/scripts/router\";\r\nimport Header from \"@/components/header/Header.vue\";\r\n\r\nexport default {\r\n  components: { Header },\r\n  setup() {\r\n    const state = reactive({\r\n      form: {\r\n        email: \"\",\r\n        password: \"\"\r\n      }\r\n    });\r\n\r\n    const googleSignIn = async () => {\r\n      try {\r\n        const googleUser = await gapi.auth2.getAuthInstance().signIn();\r\n        const idToken = googleUser.getAuthResponse().id_token;\r\n        // idToken을 사용하여 서버로 AJAX 요청 보내기\r\n        const googleEmail = googleUser.getBasicProfile().getEmail();\r\n        if (googleEmail !== 'undefined') {\r\n          console.log(googleEmail);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Google 로그인 실패:\", error);\r\n      }\r\n    };\r\n\r\n    const submit = () => {\r\n      axios.post(\"/api/account/login\", state.form).then((res) => {\r\n        store.commit(\"setAccount\", res.data);\r\n        if (res.data === 0) {\r\n          if (state.form.email === \"\") {\r\n            window.alert(\"이메일을 입력해주세요\");\r\n          } else if (state.form.password === \"\") {\r\n            window.alert(\"비밀번호를 입력해주세요\");\r\n          } else {\r\n            window.alert(\"이메일이나 비밀번호가 틀립니다\");\r\n            router.push({ path: \"/login\" });\r\n          }\r\n        } else {\r\n          window.alert(\"로그인 하였습니다\");\r\n          router.push({ path: \"/\" });\r\n        }\r\n      });\r\n    };\r\n\r\n    return { state, submit, googleSignIn };\r\n  },\r\n  mounted() {\r\n    gapi.load('auth2', function() {\r\n      gapi.auth2.init();\r\n    });\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.form-signin {\r\n  max-width: 330px;\r\n  padding: 1rem;\r\n}\r\n\r\n.btn {\r\n  background-color: #24855b;\r\n  color: #ffffff;\r\n}\r\n\r\n.form-signin .form-floating:focus-within {\r\n  z-index: 2;\r\n}\r\n\r\n.form-signin input[type=\"email\"] {\r\n  margin-bottom: -1px;\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n}\r\n\r\n.form-signin input[type=\"password\"] {\r\n  margin-bottom: 10px;\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n}\r\n</style>\r\n"],"mappings":";AAsBA,SAASA,QAAO,QAAS,KAAK;AAC9B,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,KAAI,MAAO,iBAAiB;AACnC,OAAOC,MAAK,MAAO,kBAAkB;AACrC,OAAOC,MAAK,MAAO,gCAAgC;AAEnD,eAAe;EACbC,UAAU,EAAE;IAAED;EAAO,CAAC;EACtBE,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIP,QAAQ,CAAC;MACrBQ,IAAI,EAAE;QACJC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IAEF,MAAMC,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,UAAS,GAAI,MAAMC,IAAI,CAACC,KAAK,CAACC,eAAe,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;QAC9D,MAAMC,OAAM,GAAIL,UAAU,CAACM,eAAe,CAAC,CAAC,CAACC,QAAQ;QACrD;QACA,MAAMC,WAAU,GAAIR,UAAU,CAACS,eAAe,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QAC3D,IAAIF,WAAU,KAAM,WAAW,EAAE;UAC/BG,OAAO,CAACC,GAAG,CAACJ,WAAW,CAAC;QAC1B;MACF,EAAE,OAAOK,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACxC;IACF,CAAC;IAED,MAAMC,MAAK,GAAIA,CAAA,KAAM;MACnBzB,KAAK,CAAC0B,IAAI,CAAC,oBAAoB,EAAEpB,KAAK,CAACC,IAAI,CAAC,CAACoB,IAAI,CAAEC,GAAG,IAAK;QACzD3B,KAAK,CAAC4B,MAAM,CAAC,YAAY,EAAED,GAAG,CAACE,IAAI,CAAC;QACpC,IAAIF,GAAG,CAACE,IAAG,KAAM,CAAC,EAAE;UAClB,IAAIxB,KAAK,CAACC,IAAI,CAACC,KAAI,KAAM,EAAE,EAAE;YAC3BuB,MAAM,CAACC,KAAK,CAAC,aAAa,CAAC;UAC7B,OAAO,IAAI1B,KAAK,CAACC,IAAI,CAACE,QAAO,KAAM,EAAE,EAAE;YACrCsB,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;UAC9B,OAAO;YACLD,MAAM,CAACC,KAAK,CAAC,kBAAkB,CAAC;YAChC9B,MAAM,CAAC+B,IAAI,CAAC;cAAEC,IAAI,EAAE;YAAS,CAAC,CAAC;UACjC;QACF,OAAO;UACLH,MAAM,CAACC,KAAK,CAAC,WAAW,CAAC;UACzB9B,MAAM,CAAC+B,IAAI,CAAC;YAAEC,IAAI,EAAE;UAAI,CAAC,CAAC;QAC5B;MACF,CAAC,CAAC;IACJ,CAAC;IAED,OAAO;MAAE5B,KAAK;MAAEmB,MAAM;MAAEf;IAAa,CAAC;EACxC,CAAC;EACDyB,OAAOA,CAAA,EAAG;IACRvB,IAAI,CAACwB,IAAI,CAAC,OAAO,EAAE,YAAW;MAC5BxB,IAAI,CAACC,KAAK,CAACwB,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}