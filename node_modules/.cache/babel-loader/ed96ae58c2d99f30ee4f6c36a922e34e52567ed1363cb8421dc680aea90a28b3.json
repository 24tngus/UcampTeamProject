{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport router from \"@/scripts/router\";\nexport default {\n  data() {\n    return {\n      currentTime: new Date(),\n      mUidDate: '' // merchant_uid에 붙일 값. 현재시간을 yyMMdd_HHmmss식으로 가져와서 중복 방지\n    };\n  },\n\n  methods: {\n    // 결제\n    requestPay: function () {\n      const {\n        IMP\n      } = window;\n      IMP.init('imp70364071');\n      // https://developers.portone.io/docs/ko/sdk/javascript-sdk/payrq >> 파라미터 정리 되어있음.\n      IMP.request_pay({\n        // param\n        pg: \"kcp.INIBillTst_inicis\",\n        // pg사 구분코드\n        pay_method: \"card\",\n        // 결제수단 구분코드\n        merchant_uid: \"vrm_wando_\" + this.mUidDate,\n        // 가맹점 주문번호. 40bytes 이하. 매 거래시 다 달라야함. 거래고유코드라고 생각해도 될듯?\n        name: \"wando 결제테스트\",\n        // 결제대상 제품명 (상품명) > 상점명(storename + 예약) 으로 바꿔야할듯\n        amount: 50,\n        // 결제 금액@@@@\n        buyer_email: '',\n        // 주문자 이메일  > default로 저게 박힘\n        buyer_name: \"김도완\" // 주문자 이름@@@@ > 김 * 완 으로 박혀있음\n      }, rsp => {\n        // callback\n        if (rsp.success) {\n          // 결제 성공\n          console.log(\"rsp.success => \" + rsp);\n          const paymentData = {\n            paymentid: \"wando_\" + rsp.imp_uid,\n            // 포트원 고유 결제번호. success가 false이고 사전 validation에 실패한 경우, imp_uid는 null일 수 있음\n            storename: rsp.merchant_uid,\n            userid: '김도오오옹완',\n            price: rsp.paid_amount,\n            status: rsp.status // 결제 성공 시에는 status\n            /* 결제상태\n                ready(브라우저 창 이탈, 가상계좌 발급 완료 등 미결제 상태)\n                paid(결제완료)\n                failed(신용카드 한도 초과, 체크카드 잔액 부족, 브라우저 창 종료 또는 취소 버튼 클릭 등 결제실패 상태) */\n          };\n\n          console.log(\"before post\");\n          console.log(paymentData.paymentid);\n          console.log(paymentData.storename);\n          console.log(paymentData.userid);\n          console.log(paymentData.price);\n          console.log(paymentData.status);\n          axios.post(\"/api/payment\", paymentData).then(data => {\n            // 서버 결제 API 성공시 로직\n            console.log(data);\n            alert(\"결제 성공!\");\n            router.push({\n              name: \"PaymentSuccess\",\n              params: {\n                value: paymentData.paymentid\n              }\n            });\n          }).catch(error => {\n            // 서버 결제 API 실패 시 로직\n            console.log(error);\n            alert(\"DB 입력 API 요청 실패\");\n          });\n        } else {\n          // 결제 실패\n          const paymentData = {\n            paymentid: \"wando_\" + rsp.imp_uid,\n            // 포트원 고유 결제번호. success가 false이고 사전 validation에 실패한 경우, imp_uid는 null일 수 있음\n            storename: rsp.merchant_uid,\n            userid: \"김완도도도독\",\n            price: \"500000\",\n            status: rsp.success // 결제 실패 시에는 status가 할당되지 않아서 success.\n          };\n\n          axios.post(\"/api/payment\", paymentData).then(data => {\n            // 서버 결제 API 실패 시 로직\n            console.log(data);\n            alert(\"결제에 실패했습니다. 에러 내용 : \" + rsp.error_msg);\n          }).catch(error => {\n            // 서버 결제 API 실패시 로직\n            console.log(error);\n            alert(\"DB 입력 API 요청 실패\");\n          });\n        }\n      });\n    }\n  },\n  computed: {\n    // yyMMdd_HHmmss 변환 후 merchant_uid에 붙임 ex)231031_224258\n    formattedCurrentTime() {\n      const date = this.currentTime;\n      const year = String(date.getFullYear()).slice(-2);\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n      return `${year}${month}${day}_${hours}${minutes}${seconds}`;\n    }\n  },\n  created() {\n    this.mUidDate = this.formattedCurrentTime;\n  }\n};","map":{"version":3,"names":["axios","router","data","currentTime","Date","mUidDate","methods","requestPay","IMP","window","init","request_pay","pg","pay_method","merchant_uid","name","amount","buyer_email","buyer_name","rsp","success","console","log","paymentData","paymentid","imp_uid","storename","userid","price","paid_amount","status","post","then","alert","push","params","value","catch","error","error_msg","computed","formattedCurrentTime","date","year","String","getFullYear","slice","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","created"],"sources":["/Users/soohykim/Desktop/front/src/components/payment/Payment.vue"],"sourcesContent":["<template>\n  <div>\n    <button @click=\"requestPay\">결제하기</button>\n    <!-- 결제하기 버튼 생성 -->\n  </div>\n  <p>{{ mUidDate }}</p>\n</template>\n\n\n<script>\nimport axios from \"axios\";\nimport router from \"@/scripts/router\";\n\nexport default {\n  data() {\n    return {\n      currentTime : new Date(),\n      mUidDate : '',  // merchant_uid에 붙일 값. 현재시간을 yyMMdd_HHmmss식으로 가져와서 중복 방지\n    }\n  },\n  methods: {\n    // 결제\n    requestPay: function () {\n      const { IMP } = window;\n\n      IMP.init('imp70364071');\n      // https://developers.portone.io/docs/ko/sdk/javascript-sdk/payrq >> 파라미터 정리 되어있음.\n      IMP.request_pay({ // param\n        pg: \"kcp.INIBillTst_inicis\",  // pg사 구분코드\n        pay_method: \"card\", // 결제수단 구분코드\n        merchant_uid: \"vrm_wando_\" + this.mUidDate,  // 가맹점 주문번호. 40bytes 이하. 매 거래시 다 달라야함. 거래고유코드라고 생각해도 될듯?\n        name: \"wando 결제테스트\",  // 결제대상 제품명 (상품명) > 상점명(storename + 예약) 으로 바꿔야할듯\n        amount: 50, // 결제 금액@@@@\n        buyer_email: '', // 주문자 이메일  > default로 저게 박힘\n        buyer_name: \"김도완\",  // 주문자 이름@@@@ > 김 * 완 으로 박혀있음\n      }, rsp => { // callback\n        if (rsp.success) {  // 결제 성공\n          console.log(\"rsp.success => \" + rsp)\n\n          const paymentData = {\n            paymentid: \"wando_\" + rsp.imp_uid,  // 포트원 고유 결제번호. success가 false이고 사전 validation에 실패한 경우, imp_uid는 null일 수 있음\n            storename: rsp.merchant_uid,\n            userid: '김도오오옹완',\n            price: rsp.paid_amount,\n            status: rsp.status, // 결제 성공 시에는 status\n            /* 결제상태\n                ready(브라우저 창 이탈, 가상계좌 발급 완료 등 미결제 상태)\n                paid(결제완료)\n                failed(신용카드 한도 초과, 체크카드 잔액 부족, 브라우저 창 종료 또는 취소 버튼 클릭 등 결제실패 상태) */\n          };\n\n          console.log(\"before post\")\n          console.log(paymentData.paymentid)\n          console.log(paymentData.storename)\n          console.log(paymentData.userid)\n          console.log(paymentData.price)\n          console.log(paymentData.status)\n\n          axios.post(\"/api/payment\", paymentData)\n              .then((data) => {\n                // 서버 결제 API 성공시 로직\n                console.log(data)\n                alert(\"결제 성공!\");\n\n                router.push({ name: \"PaymentSuccess\", params: { value : paymentData.paymentid } })\n              })\n              .catch((error) => {\n                // 서버 결제 API 실패 시 로직\n                console.log(error)\n                alert(\"DB 입력 API 요청 실패\");\n              });\n\n        } else {  // 결제 실패\n          const paymentData = {\n            paymentid: \"wando_\" + rsp.imp_uid,  // 포트원 고유 결제번호. success가 false이고 사전 validation에 실패한 경우, imp_uid는 null일 수 있음\n            storename: rsp.merchant_uid,\n            userid: \"김완도도도독\",\n            price: \"500000\",\n            status: rsp.success,  // 결제 실패 시에는 status가 할당되지 않아서 success.\n          };\n\n          axios.post(\"/api/payment\", paymentData)\n              .then((data) => {\n                // 서버 결제 API 실패 시 로직\n                console.log(data);\n                alert(\"결제에 실패했습니다. 에러 내용 : \" + rsp.error_msg)\n              })\n              .catch((error) => {\n                // 서버 결제 API 실패시 로직\n                console.log(error)\n                alert(\"DB 입력 API 요청 실패\");\n              });\n\n        }\n      });\n    }\n  },\n  computed: {\n    // yyMMdd_HHmmss 변환 후 merchant_uid에 붙임 ex)231031_224258\n    formattedCurrentTime() {\n      const date = this.currentTime;\n      const year = String(date.getFullYear()).slice(-2);\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      const seconds = String(date.getSeconds()).padStart(2, '0');\n\n      return `${year}${month}${day}_${hours}${minutes}${seconds}`;\n    },\n  },\n  created() {\n    this.mUidDate = this.formattedCurrentTime\n  }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}